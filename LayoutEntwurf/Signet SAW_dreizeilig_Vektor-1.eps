%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Logos_Vektor_3z.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Martin Uhlig
%%CreationDate: 2/12/10
%%BoundingBox: 0 0 58 53
%%HiResBoundingBox: 0 0 57.8979 52.7070
%%CropBox: 0 0 57.8979 52.7070
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x409 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 120 8%%BeginData: 12272 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD31FF83A883A883A883A883A883A85958345F345859A884A883A8%83A883A883A883FD60FFA8125859585F5859585F58590B58FD04FFA81234%5F5859585F5859585F3412A8FD60FF58FD0BFF58FD05FF58FD0BFF34FD60%FFA858FD0BFF58A8FFFFFF835FFD0AFFA834AEFD60FF58FD09FFA85F0BA8%FFFFFF830B83A8FD09FF34FD60FFA858FD08FF34110B3459FFFFFF58580B%1158FD07FFA834FD61FF58FD07FF111183FFAE5FFFFFFF58FFFF591134FD%07FF34FD60FFA858FD06FF0B12A8FFFFFF34A8FF8458FFFFFF83110BFD05%FFA834A8FD60FF58FD05FF3412AEFFFFFF591212FF11127DFFFFFFA81259%FD05FF34FD60FFA859FD04FF831183FFFFA80B110B34A8120B110BFFFFFF%5811A8FD04FF34AEFD60FF34AEA8AEA81234FFFFAF0B110B1234FF0B120B%110BFFFFFF0B34A8AEA8A834FD60FFA8110B110B0B0BA8FFFF0B110B110B%34A8120B120B0B34FFFF830B110B110B12AEFD60FFA8FFA8AFA8FFFFFF83%120B120B1234FF0B120B120B12AEFFFFFFA8AFA8FFA8FD69FF580B110B11%0B12AE110B110B110B83FD71FFA88483A8838483FF838483A88383A8FD68%FFA8A883837DA8FFFFFFAE83A883A883A8A8A883A883A883AEFFFFA8837D%8483A8FD61FF0B110B120BFFFFFF34110B120B1112FF0B110B120B1159FF%FFAE0B120B1111FD60FFA8120B110B12FFFFFF580B110B120B34A8120B11%0B120B83FFFF84110B120B12FD61FF0B120B120BFFFFFF34120B120B1234%FF0B120B120B1183FFFFAE0B120B1212FD60FFAE120B120B12A8FFFF580B%120B110B34A8120B120B110B83FFFF83110B110B34FD61FF0B120B120BFF%FFFF34120B120B1234FF0B120B120B1283FFFFAE0B120B1212FD61FF120B%120B12A8FFFF580B120B110B34AE120B120B110B83FFFF83120B110B34FD%61FF11120B1211FFFFFF34110B120B1212FF11120B120B1159FFFFAE0B12%0B1212FD60FFA8120B110B12AEFFFF580B110B120B34A8120B110B120B83%FFFF83110B120B12A8FD60FF11120B1211FFFFFF34120B120B1234FF1112%0B120B117DFFFFAE0B120B1212FD60FFA8120B110B12AEFFFF340B110B11%0B12A8120B110B110B83FFFF84110B110B12FD61FFFD0534FFFFFF593434%58343458FF34343458343483FFFFAFFD043458FD62FFA8FFA8FD05FFA8FF%A8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FD62FF1112111211FFFFFF%581211120B1234FF121211120B1283FFFFAE11120B1234FD60FFAF110B12%0B11A8FFFF340B120B110B34AE120B120B110B83FFFF83110B110B12FD61%FF11120B1211FFFFFF34110B120B1212FF11120B120B1159FFFFAE0B120B%1212FD60FFA8120B110B12AEFFFF580B110B120B34A8120B110B120B83FF%FF83110B120B12A8FD60FF11120B1211FFFFFF34120B120B1234FF11120B%120B117DFFFFAE0B120B1212FD60FFA8120B110B12FFFFFF580B110B120B%34A8120B110B120B83FFFF84110B120B12FD61FF0B120B120BFFFFFF3412%0B120B1234FF0B120B120B1183FFFFAE0B120B1212FD60FFAE120B120B12%A8FFFF580B120B110B34A8120B120B110B83FFFF83110B110B34FD61FF0B%120B120BFFFFFF34120B120B1234FF0B120B120B1283FFFFAE0B120B1212%FD60FFAF110B120B11A8FFFF340B120B110B34AE120B120B110B83FFFF83%110B110B12FD61FF12120B1212FFFFFF58120B12111234FF12120B121212%7DFFFFAE0B12111234FD64FFA8FD05FFAEFFA8FFAEFD05FFA8FFAEFD05FF%A8FD64FF83838384838359FD048384FD078384FD078384838383FD60FFA8%120B120B120B120B120B120B120B120B120B120B120B120B120B120B120B%11A8FD60FF34FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8%FFAEFFA8AE12FD60FFA81234583458345834583458345834583458345834%5834583458345834583412AEFD60FFA8FFAEFFAEFFAEFFAEFFAEFFAEFFAE%FFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFDFCFFFDFCFFFDFCFFFDBFFFA8FD%11FF83AEFD1BFFA8A8FD19FF83AEFD10FFAE84AEFD1FFF830B110B83FFFF%5884FF5F83FD07FFAE1134FD0BFFA858A8FD0DFF0B34FD12FFA81234FFFF%FFAE1134FD10FF830BA8FD14FFA858A8FD07FFA80B34838384FFFF1259FF%0B5FFD08FF0B5FFD0BFF840B83FD0DFF1234FD12FF830B12FD04FF0B5FFD%10FF8311A8FD14FF840B83FD07FF0B12FD06FFA8FFFFFFA8FD07FFA81158%FD0BFFAEA8A8FD0DFF0B34FD12FF34110BA8FFFFA81158FD10FF830BA8FD%14FFAEA8A8FD07FF1234FD07FF8384AEFD05FFA884A8FF0B83AEA8A8FD04%FFA883FFFFFFA8FFFFFFA884A8FD04FFAE83AEFF1234FF83AEFD05FFA883%FD08FF12581283FFFFFF0B5FFFFFA8FFFFFFA884A8FD05FF83AE8312A8FF%FFFF8484FD04FFA8FF83A8FFFFA8A8AEFFFFFFA8FD04FFAE83FFFF3411A8%FD05FF0B120B11A8FFFFFF0B110B58FF120B120B1183FFFF580B110BFFA8%1183FF83110B1183FFFF590B110BFF11120B110B83FFFFA8120B1134FD07%FF0BA83458FFFFA81258FF7D1183FF58110B1158FFFFFF34110B120BA8FF%FF34110B12A8FF581211110B5859120B12A8FF84117DFFFF580B110BAEAE%0B12A8FD04FFA8FFAE0B58FFFF581183FFAEFF0B12A8AE0B34FFA80BA8FF%AEFFAE0BA8FF1234FFA8FFFF830B83AEAFFF340B83A81211FFFF5F0BFF83%1183FD05FF8312AF830BFFFFFF0B83FF1234FFFFAEA8FF3411A8FF83117D%FF1111A8FF8311A8AE0B83FF830B58AE5F0B12A8A80B83FFAE0B84FFA80B%A8A81234FFA80B117DFD06FF340BFFA81158FFFFFFA81134FFFF340BFF59%0BA8FFFFFF831183FF0B83FD04FF0B34FD04FF0B12FFFF5811A8FF0B83FF%FF0B58FD05FF590BFF8311A8FFAE1158830BAEFD05FFA80BA8FF340BFFFF%830BA8FF1234FFFF580BFF5911A8FF831159FFA81134FF831183FF0B34FF%FF5811FFFFFF111184FFFFFF835F1134FFAE0BA8FD04FF0B83FFFF3412FF%FF0B12AEFFFFAE0BA8FF580B84FFFFA8117DFD04FF1234FFFF830BFFA812%58A8831234FD05FF1258FFAE0BA8FFFF0B580B83FD04FFA883341283FF0B%59FFFF8311A8FF0B5883A81212FF830BFFFFAE0BA8FFFF1234FFAE0BA8FF%1234A8835F0BFD04FF0B34FFFF121134120BFF8311A8FD04FF1158FFFF34%0BFFFF830B1184FF831183FFA8340B59FFA80B83FD04FF0B34FFFF5911A8%A80B120B120B5FFD04FFAE120B120B1158FFFF120B1159FFFFFF7D110B58%0B84FF1158FFFF840BA8A8120B120B1234FF5911A8FF831183FFFF1234FF%831183FF0B120B120B34FD04FF5F0BFF5911A8FF3412FF840BAEFD04FF0B%5FFFFF3412FFFFFFAE0B12FFAE0BA8FFFFFF590BA8A81183FD04FF1234FF%FF830BFFA81183FD08FFAE0B5859831134FFFF0B343412AFFFA81258FFA8%1283FF0B5FFFFF8312A8FF0B83FD05FF830BFFFFAE0BA8FFFF0B58FFAE0B%A8FF1258FD08FF3412FF340BFFFF340BFF830B59FFFFFFA81158FFFF340B%FD04FF830BAEA80B7DFFFFFFCF1158FF0B59FD04FF0B34FFFF590BA8FF0B%5FFD08FF5911A8FFFF5F0BFFA81158AE0B83FF830BAEFFA80B84FF120BFF%FF830BA8FF1134FD05FF590BA8FF830B7DFFFF1234FF840B7DFF0B34FD07%FFA81258FF3412FFFF0B34FFFF0B12FD04FF0B5FFFFF3412FD04FF8312AE%AE0BA8FD04FF0B83FF340BAEFFFFFF1234FFFF830BFFFF340BFD08FF5F11%FFFFFF8311A8FF0B5FFF340BFF841283FF591283FF5812A8FF3412A8FF34%12A8FD04FF830BFFFFAE0BA8FFFF1158FFAE0BA8FF830BAEFFFFFF0B120B%110BFFFF830B3412110BFFFFA80B120B59FF1134FFFF340BFF5912341134%FF830B83FF0B340B12A8FFA8110B1234FF0B12FFFF580BA8FFA8110B580B%A8FD04FF0B34FFFFFFAE0B83FF1134FF831158FF0B1134120B83FFAE0B12%11120BA8FFAE0B1134127DFF580BA8FF830B7DFFFF110BFF830B7DFFAE12%0B340B5F8434587DFD04FF831283A85FFFFFFFAE345883FF58A8FFFF8383%FFAE585883FFFFFF58AEFF83345FA8FFFFFFA85F3483FF8383FFFFAE58FF%FFFFA8593483AEFD04FF5F83FD04FF8383FF58A8FFFF5883FFAE3459A883%A8FFFFAE345FA883A8FFFFFF585858AEFFAE58FFFFFF58AEFFFF5983FFFF%58AEFFFFFF83345FA8FD46FFCFFD13FFAEFD07FFCFFDFCFFFDFCFFFDFCFF%FDFBFFCFFD38FF83FD11FFA8FD09FFA8FD2BFFA884FD0FFFAE5883FD23FF%831183FD0FFF5811A8FFFFA80BA8FFFFA81183A834FD28FF830BAEFD0DFF%AE0B110BFD23FFAE0BA8FD0FFF840BA8FFFF59117DFFFF840BAE5811A8FD%27FF5912A8FD0DFF3412AEFFFFAEA8FD20FF840B7DFD07FFCFFD07FF8411%7DFFFF580B58FFFF5811A8FFA8FD28FF830BAFFD0DFF122DFFFFAE0B84FF%FFCFFD1BFFA884AE0BA8FFFFFFAE83FFFFFFAEAEFFAEA8FFFFFF0B5FFFFF%341212FFFF5811FFAEAEFFFFFFAE83AEFFFFFFA883FD04FFAE7DFFFFFFAE%AEFFAE83FD05FF8383A8FFFFFFA88483FF7D12AEAE83FD05FF8384FFFFFF%A80B3484AE591258AEAEFFFFA883FFFFFFA8AEFFA883FD0FFF580B110B11%83FFFF580B110BAEFF830B590B83FFFFFF1212FFA8125811A8FF0B58FF59%0BAEFF5F0B110BFFAF120B1134FFFF830B110BA8FFA80B340B110BAEFFFF%0B110B58FFFF83110B11A8830B580B110BFFFFA80B120B12A8FF0B110B12%12120B120BA8FF580B110BFFFF830B340B110BFD0DFFA80B83A8340BA8FF%A80BA8A81258FF83120B83A8FFFFFF5812FFA80BA80BAEFF1283FF5812AE%AE0B83FFAEFF830BAEA8FFFFAE0B83FF120BFFA8110BAF831158FF5911A8%FFA8FFA81212FFA8FF831134FF591183FFFFA8FFA80B83FFFF1234AEFF83%1183FFFF830BAEA81158FF831134FF581183FD0CFF3411A8FF831183FF0B%34FFFF5812FF840B83FFFFCFFFFF830BFF7D12A81183AE0BA8FF590BFF83%0B83FFFFFF3411FD04FF5811FFFF7D0BA8AE0B5FFFFF0B34FF580BFD04FF%590BAEFFFFFF830BA8FFAE0B83FD05FF1234FFFF1234FFFFA80B83FFFF0B%34FFFF3412FF830BA8FFAE0B83FD0CFF3412FFFFAE0BA8FF1234A883590B%FF8312A8FD05FF8412A85F34FF12838312AEFF5812AEFF0B12A8FFFFAE0B%58FFFFFF340BA8845F0BAFA81183FFFF1234FF831134FFFFFF3412FD04FF%8311A8FFAE1159FFFFFF7D5F0B58FFFF1258FFFFA81183FFFF1234A88334%0BFF8311A8FFAE1159FD0CFF0B58FFFF831183FF0B1234341158FF830BA8%FD06FF0B833483FF5834830BFFFF590BFFFFA80B1183FFFF830B12A8FF0B%1111343434A8AE0B83FFFF0B34FFFF59110BFFFF1234FD04FF830BAEFFFF%0B83FFAF0B11341234FFFF1234FFFFA80B83FFAF0B1234343458FF830BAE%FFFF0B83FD0CFF1234FFFFAE0BA8FF1258FD05FF831184FD06FF123412A8%FF7D123458FFFF5811A8FFFFFF0B12AEFFFFA80B34FF3434FD05FF841283%FFFF1234FFFFFF831134FF1234FD04FF5912A8FFA81283FF3412AFFF0B58%FFFF0B58FFFF841283FFA81259FD05FF5912A8FFA81283FD0CFF3412FFFF%830B7DFF0B34FD05FF840BA8FD06FF34110BFFFFA80B1158FFFF590BAEFF%FFFFA80B83FFFFFF830BFF3412FD05FFA80B84FFFF0B34FD04FF5811A858%0BFD04FF830BAEFFAE0B83FF1158FFFF1234FFFF1234FFFFA80B84FFFF0B%58FD05FF830BAEFFAE0B83FD0CFF830BAEFF5F0BA8FF830BAEFD04FF8311%A8FD06FF830B34FFFFAE120BA8FFFF5812A8FFFFFF8312A8FFFFFF5812FF%A80B83FD04FFA81283FFFF1234FD04FF5F0BFF831159FFFFFF5912AEFFA8%1283FF0B59FFFF0B59FFFF1158FFFFA81283FFFF5F0BAEFD04FF5912AEFF%A81283FD0CFFA8110B340B117DFFA8120B580B83FF830BA8FD06FF830B34%FFFFFF0B11A8FFFF580BFF8312341111FF5812111158FFFF340B340B58FF%A80B83FFFF0B34FF580B340B83FFFF34110B12A8830BAFFFAE0B83FF590B%340B110BFFFF110BFFFFFF0B1134FFA8120B340B83FF5F0BAFFFAE0B83FD%0DFFA85834FF83AEFFFFAE83345FA8FFA883AEFD07FF59AEFFFFFFA859FF%FFFF8383FFFF585959FFFFAE585883FD04FF83345883FFAE83A8FFFF8383%FF84593484FD04FF835858FFA883AEFFFF83A8FFFF8312A88384FFFF83A8%FFFFFFAE345FFFFFA8833459A8FFA883AEFFFF83A8FD44FFCFFFFFFFA8FD%13FFCFFFFFFFA8FD17FFA8FFFFFFCFFFFFFFA8FDFCFFFDFCFFFDFCFFFDFC%FFFD4AFFA8FD7EFF5811A8FD0BFF34A8FD0FFFA834FD5FFF5F0BFD0BFFA8%1158FD0FFF5811A8FD5EFF5811AEFD0BFFA8FD11FF84FD4EFF84AEA8AEA8%FFA8AEFFFFA8AEFD05FF5F0BFD06FFAE83AEFFFFFFAEAEFFAEAEFFA883FF%FFFFA8AE84AEA8FFAEAFFD04FF83AEAEAEFD45FF83110B110B34FF1212FF%FF590BFD05FF5812FD05FF830B110B83FFAF0B83FF830B340B1134FFAE12%0B110B11AE830BAFFFFF0B110B120BAFFD45FFA8FF831183FF0B58FFFF58%12FD05FF5F0BFD05FF0B5FFF340BFFA81283FF7D1134FF581183FFA8FFA8%1212FF8311A8FF581184AE0B12A8FD47FF340BFFFF1234FFFF580BFD05FF%5811A8FFFFFF5911A8FF8311A8FF0B83FF830BA8FFFF0B58FFFFFF840BA8%FF830BAECF1234FFFF590BAEFD46FFAE0B84FFFF1158FFFF5812FD05FF5F%0BFD04FF5F0B837D5F0BA8FF1283FF8312A8FFFF3412FFFFFF1134FFFF83%11AEFF0B83FFFF8311A8FD46FF3411A8FFFF1234FFFF590BFD05FF5811A8%FFFFFF34120B120B12A8FF0B83FF830BA8FFFF3412FFFF7D1183FFFF830B%FFA81183FFFF830BAEFD45FF841183FFFFFF1258FFFF5812FD05FF5F0BFD%04FF580BFD05FFA81159FF8311A8FFFF3411FFFF1212FFFFFF5912AEFF0B%83FFFF5912A8FD45FF340BFFFFFFA81212FFFF590BFD05FF5811FD04FF58%0BA8FD04FFAE0B83FF840BA8FFFF0B58FF830BA8FFFFFF830BFFA81158FF%FF590BAEFD44FFA80B84FD04FF3412FFFF1212FD05FF5F0BFD04FFAE0B83%FD04FFAE1159FF831158FF831183FF1134FD04FF5912AEFF3412AEFF0B12%AEFD44FF340B0B120B58FF840B120B120BFD05FF34110B120B83FF580B34%3434FFFF0B5FFF840B110B110BFF83110B120B12FF830BAFFFA80B110B12%0BFD45FFA85983588383FFFF833483A883FD05FFA85883595F83FFFF8334%5983FFAE83A8FF8312595958FFFFAE5983598358FFA883AEFFFFAE58AE59%11AEFD5CFFCFFD0AFF830BAEFD0EFFCFFD04FF580BFD68FF8312A8FD13FF%0B58FD68FF830BA8FD0FFF830B120B12A8FD68FFAE84A8FD0FFFA8835883%A8FD68FFCFFD3AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-02-12T14:20:53+01:00</xap:CreateDate>
         <xap:ModifyDate>2010-02-12T14:20:53+01:00</xap:ModifyDate>
         <xap:MetadataDate>2010-02-12T14:20:53+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>236</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA7AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXnw0nWtc85eZok8xahpttYTWkcFtaunpgSWccjbSK9KsSdsrqyXXDHPJln65RAI5V&#xA;/NHkj/8AAOs/9TjrH/BQf9UsPB5tn5Sf+qT+z9Tv8A6z/wBTjrH/AAUH/VLHg81/KT/1Sf2fqSPQ&#xA;fJml6h5m1/SfM011r02nPbS2ct9PIVNvcxctoUZY/hlRx9nAI77uPh00ZZJxyXOqqz0I7uXO+jvP&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:91DC71ED7319DF11B9B4CAF9CF01F353</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:92DC71ED7319DF11B9B4CAF9CF01F353</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:90DC71ED7319DF11B9B4CAF9CF01F353</stRef:instanceID>
            <stRef:documentID>uuid:8FDC71ED7319DF11B9B4CAF9CF01F353</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.999994</stDim:w>
            <stDim:h>297.000002</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -52.707 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 52.707 li
57.8979 52.707 li
57.8979 0 li
cp
clp
[1 0 0 1 0 0 ]ct
24.4106 11.8926 mo
24.4106 6.99805 li
22.1675 6.99805 li
22.1675 11.8926 li
24.4106 11.8926 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 0 0.9 0.2 cmyk
f
36.0952 11.8955 mo
36.0952 7 li
33.8521 7 li
33.8521 11.8955 li
36.0952 11.8955 li
f
36.0972 17.3506 mo
36.0972 12.4551 li
33.854 12.4551 li
33.854 17.3506 li
36.0972 17.3506 li
f
25.9272 11.8926 mo
25.9272 6.99805 li
28.8438 6.99805 li
28.8438 11.8926 li
25.9272 11.8926 li
f
25.9292 12.4531 mo
25.9292 17.3477 li
28.8438 17.3477 li
28.8438 12.4531 li
25.9292 12.4531 li
ef
29.4077 7 mo
29.4077 11.8955 li
32.3237 11.8955 li
32.3237 7 li
29.4077 7 li
ef
32.3247 7 mo
32.3237 7 li
32.3237 11.8955 li
32.3247 11.8955 li
32.3247 7 li
f
29.4097 12.4551 mo
29.4097 17.3506 li
32.3237 17.3506 li
32.3237 12.4551 li
29.4097 12.4551 li
ef
32.3267 12.4551 mo
32.3237 12.4551 li
32.3237 17.3506 li
32.3267 17.3506 li
32.3267 12.4551 li
f
36.0952 5.42285 mo
36.0952 4.85938 li
33.5249 4.85938 li
33.5249 5.42285 li
36.0952 5.42285 li
f
22.4863 0.374023 mo
22.4863 5.42383 li
22.1675 5.42383 li
22.1675 0.374023 li
22.4863 0.374023 li
f
36.0952 0.375 mo
36.0952 5.4248 li
35.7759 5.4248 li
35.7759 0.375 li
36.0952 0.375 li
f
27.7632 0.693359 mo
27.7632 0.374023 li
22.1675 0.374023 li
22.1675 0.693359 li
27.7632 0.693359 li
f
36.0962 0.693359 mo
36.0962 0.374023 li
30.5005 0.374023 li
30.5005 0.693359 li
36.0962 0.693359 li
f
gsave
22.1675 0 mo
22.1675 19.5107 li
36.0972 19.5107 li
36.0972 0 li
clp
0.321449 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
27.5151 0.537109 mo
27.5151 0.537109 28.061 0.161133 29.1274 0.161133 cv
30.1909 0.161133 30.7437 0.537109 30.7437 0.537109 cv
@
grestore
36.0952 18.6318 mo
36.0952 18.0723 li
22.1675 18.0723 li
22.1675 18.6318 li
36.0952 18.6318 li
f
36.0952 19.5107 mo
36.0952 18.0723 li
35.772 18.0723 li
35.772 19.5107 li
36.0952 19.5107 li
f
22.1675 19.1914 mo
22.1675 19.5107 li
36.0952 19.5107 li
36.0952 19.1914 li
22.1675 19.1914 li
f
22.4863 18.0723 mo
22.4863 19.5107 li
22.1675 19.5107 li
22.1675 18.0723 li
22.4863 18.0723 li
f
25.9316 6.43457 mo
28.8438 6.43457 li
28.8438 3.52246 li
27.2988 3.65918 26.0688 4.88965 25.9316 6.43457 cv
ef
29.4077 3.52148 mo
29.4077 6.43457 li
32.3296 6.43457 li
32.1929 4.88574 30.9575 3.65332 29.4077 3.52148 cv
ef
22.1694 12.4531 mo
22.1694 17.3477 li
24.4106 17.3477 li
24.4106 12.4531 li
22.1694 12.4531 li
ef
24.4126 12.4531 mo
24.4106 12.4531 li
24.4106 17.3477 li
24.4126 17.3477 li
24.4126 12.4531 li
f
gsave
22.1675 0 mo
22.1675 19.5107 li
36.0972 19.5107 li
36.0972 0 li
clp
0.337517 lw
1 lc
1 lj
4 ml
[] 0 dsh
true sadj
30.6089 0.573242 mo
29.8784 3.7832 li
28.3799 3.78711 mo
27.6499 0.576172 li
@
grestore
24.7368 4.86035 mo
22.1675 4.86035 li
22.1675 5.42383 li
23.9668 5.42383 li
24.7368 5.42383 li
24.7368 4.86035 li
ef
28.2168 2.33398 mo
28.0913 1.7832 li
26.2256 2.17383 24.7393 3.59473 24.2539 5.42383 cv
24.8428 5.42383 li
25.312 3.86719 26.605 2.66797 28.2168 2.33398 cv
ef
30.1675 1.78223 mo
30.0396 2.33496 li
31.6499 2.66797 32.9429 3.86719 33.4116 5.42383 cv
34.0073 5.42383 li
33.5229 3.59375 32.0347 2.17188 30.1675 1.78223 cv
ef
41.396 49.3594 mo
41.396 49.4844 41.3882 49.6182 41.3511 49.7529 cv
41.2183 50.2695 40.9507 50.3672 40.7378 50.3672 cv
40.3179 50.3672 39.9722 49.8682 39.9722 48.7715 cv
39.9722 47.8164 40.2388 47.1475 40.7378 47.1475 cv
41.1284 47.1475 41.2896 47.5049 41.3608 47.7988 cv
41.3882 47.8877 41.396 48.0039 41.396 48.1104 cv
41.396 49.3594 li
41.396 49.3594 li
cp
42.0708 47.9688 mo
42.0708 47.2988 42.0972 46.917 42.1069 46.623 cv
41.5024 46.623 li
41.4663 47.1025 li
41.4497 47.1025 li
41.3159 46.8633 41.103 46.5615 40.6479 46.5615 cv
40.0073 46.5615 39.2886 47.21 39.2886 48.7979 cv
39.2886 50.0645 39.7856 50.9277 40.5503 50.9277 cv
40.9155 50.9277 41.2358 50.7402 41.3784 50.4033 cv
41.396 50.4033 li
41.396 50.8389 li
41.396 51.8105 41.0581 52.1465 40.5151 52.1465 cv
40.1675 52.1465 39.8823 52.0498 39.7144 51.9619 cv
39.5542 52.4922 li
39.7769 52.6172 40.1313 52.707 40.4966 52.707 cv
40.9868 52.707 41.3882 52.5371 41.644 52.2539 cv
41.9292 51.9346 42.0708 51.5107 42.0708 50.3857 cv
42.0708 47.9688 li
42.0708 47.9688 li
cp
38.1401 45.0674 mo
37.9185 45.0674 37.7407 45.2441 37.7407 45.5117 cv
37.7407 45.7773 37.9097 45.9551 38.1313 45.9551 cv
38.3882 45.9551 38.5483 45.7773 38.5483 45.5117 cv
38.5483 45.2441 38.3882 45.0674 38.1401 45.0674 cv
38.1401 45.0674 li
cp
38.4956 50.9277 mo
38.4956 46.623 li
37.812 46.623 li
37.812 50.9277 li
38.4956 50.9277 li
38.4956 50.9277 li
cp
34.6636 50.9277 mo
37.1177 50.9277 li
37.1177 50.3594 li
35.437 50.3594 li
35.437 50.3418 li
35.5347 50.1455 35.6597 49.9141 35.7837 49.7002 cv
37.1255 47.0762 li
37.1255 46.623 li
34.8325 46.623 li
34.8325 47.1914 li
36.3608 47.1914 li
36.3608 47.21 li
36.2729 47.3965 36.1304 47.6279 36.0229 47.8418 cv
34.6636 50.5098 li
34.6636 50.9277 li
34.6636 50.9277 li
cp
32.1724 48.251 mo
32.1724 48.1348 32.1812 48.0195 32.1987 47.9219 cv
32.2339 47.5293 32.519 47.1475 32.8306 47.1475 cv
33.3823 47.1475 33.5972 47.8945 33.5972 48.7842 cv
33.5972 49.6475 33.4097 50.4307 32.8394 50.4307 cv
32.6519 50.4307 32.3413 50.3232 32.2075 49.71 cv
32.1812 49.6025 32.1724 49.4785 32.1724 49.3535 cv
32.1724 48.251 li
32.1724 48.251 li
cp
31.4976 52.6348 mo
32.1724 52.6348 li
32.1724 50.502 li
32.189 50.502 li
32.3062 50.7402 32.5366 50.998 32.9468 50.998 cv
33.6226 50.998 34.2798 50.3672 34.2798 48.7666 cv
34.2798 47.3516 33.7915 46.5615 33.0356 46.5615 cv
32.6978 46.5615 32.3589 46.7217 32.1187 47.1738 cv
32.1011 47.1738 li
32.0659 46.623 li
31.4614 46.623 li
31.4702 46.9258 31.4976 47.3076 31.4976 47.9658 cv
31.4976 52.6348 li
31.4976 52.6348 li
cp
30.1714 45.0674 mo
29.9497 45.0674 29.771 45.2441 29.771 45.5117 cv
29.771 45.7773 29.9409 45.9551 30.1626 45.9551 cv
30.4204 45.9551 30.5806 45.7773 30.5806 45.5117 cv
30.5806 45.2441 30.4204 45.0674 30.1714 45.0674 cv
30.1714 45.0674 li
cp
30.5269 50.9277 mo
30.5269 46.623 li
29.8433 46.623 li
29.8433 50.9277 li
30.5269 50.9277 li
30.5269 50.9277 li
cp
27.0757 48.332 mo
27.1025 47.7432 27.3257 47.0938 27.7798 47.0938 cv
28.1084 47.0938 28.4287 47.4766 28.4204 48.332 cv
27.0757 48.332 li
27.0757 48.332 li
cp
29.0596 48.8379 mo
29.0684 48.7305 29.0776 48.6152 29.0776 48.4463 cv
29.0776 47.4854 28.7217 46.5615 27.8506 46.5615 cv
26.9878 46.5615 26.3926 47.4326 26.3926 48.8193 cv
26.3926 50.1367 26.9258 50.9805 27.9575 50.9805 cv
28.3047 50.9805 28.6685 50.9004 28.9087 50.7764 cv
28.7925 50.2783 li
28.6245 50.3672 28.3848 50.4395 28.0815 50.4395 cv
27.5928 50.4395 27.0674 50.1631 27.0674 48.8379 cv
29.0596 48.8379 li
29.0596 48.8379 li
cp
23.6978 50.9277 mo
26.0625 50.9277 li
26.0625 50.3506 li
24.3813 50.3506 li
24.3813 44.9336 li
23.6978 44.9336 li
23.6978 50.9277 li
23.6978 50.9277 li
cp
21.2324 46.623 mo
20.5483 46.623 li
20.5483 49.4609 li
20.5483 49.6035 20.5405 49.7363 20.5137 49.8525 cv
20.4775 50.0479 20.2998 50.4219 19.8994 50.4219 cv
19.4277 50.4219 19.3208 49.9238 19.3208 49.248 cv
19.3208 46.623 li
18.6367 46.623 li
18.6367 49.3457 li
18.6367 50.4121 18.9385 50.998 19.6855 50.998 cv
20.1484 50.998 20.4775 50.6875 20.6025 50.4746 cv
20.6206 50.4746 li
20.6733 50.9277 li
21.2686 50.9277 li
21.2598 50.6074 21.2324 50.2256 21.2324 49.7549 cv
21.2324 46.623 li
21.2324 46.623 li
cp
15.5063 50.9277 mo
17.9595 50.9277 li
17.9595 50.3594 li
16.2798 50.3594 li
16.2798 50.3418 li
16.3774 50.1455 16.5015 49.9141 16.6265 49.7002 cv
17.9688 47.0762 li
17.9688 46.623 li
15.6758 46.623 li
15.6758 47.1914 li
17.2046 47.1914 li
17.2046 47.21 li
17.1157 47.3965 16.9736 47.6279 16.8667 47.8418 cv
15.5063 50.5098 li
15.5063 50.9277 li
15.5063 50.9277 li
cp
f
52.2905 40.2549 mo
52.9741 40.2549 li
52.9741 37.5508 li
52.9741 37.3994 52.9839 37.2666 53.0093 37.1592 cv
53.0894 36.7051 53.3657 36.4658 53.6499 36.4658 cv
54.1499 36.4658 54.2476 36.9727 54.2476 37.4883 cv
54.2476 40.2549 li
54.9312 40.2549 li
54.9312 37.3633 li
54.9312 36.3232 54.4868 35.8887 53.8921 35.8887 cv
53.437 35.8887 53.0894 36.1289 52.9038 36.4746 cv
52.8862 36.4746 li
52.8491 35.9502 li
52.2544 35.9502 li
52.2632 36.2979 52.2905 36.5547 52.2905 37.0615 cv
52.2905 40.2549 li
52.2905 40.2549 li
cp
49.5229 37.6582 mo
49.5503 37.0713 49.7729 36.4219 50.2261 36.4219 cv
50.5562 36.4219 50.8765 36.8037 50.8677 37.6582 cv
49.5229 37.6582 li
49.5229 37.6582 li
cp
51.5063 38.1641 mo
51.5151 38.0576 51.5249 37.9424 51.5249 37.7734 cv
51.5249 36.8125 51.1694 35.8887 50.2974 35.8887 cv
49.4351 35.8887 48.8394 36.7598 48.8394 38.1465 cv
48.8394 39.4639 49.3726 40.3076 50.4048 40.3076 cv
50.7515 40.3076 51.1167 40.2275 51.355 40.1035 cv
51.2407 39.6064 li
51.0718 39.6953 50.8315 39.7666 50.5298 39.7666 cv
50.0396 39.7666 49.5151 39.4902 49.5151 38.1641 cv
51.5063 38.1641 li
51.5063 38.1641 li
cp
46.9634 35.2217 mo
46.9634 35.9502 li
46.439 35.9502 li
46.439 36.4658 li
46.9634 36.4658 li
46.9634 38.9658 li
46.9634 39.5615 47.0435 39.8555 47.2202 40.0508 cv
47.3804 40.2363 47.6206 40.3076 47.896 40.3076 cv
48.1187 40.3076 48.2788 40.2813 48.4019 40.2363 cv
48.3677 39.7139 li
48.2964 39.7305 48.2075 39.7393 48.0913 39.7393 cv
47.8433 39.7393 47.646 39.5889 47.646 39.0273 cv
47.646 36.4658 li
48.4741 36.4658 li
48.4741 35.9502 li
47.646 35.9502 li
47.646 34.9453 li
46.9634 35.2217 li
46.9634 35.2217 li
cp
45.5396 40.2549 mo
45.5396 36.4658 li
46.3218 36.4658 li
46.3218 35.9502 li
45.5396 35.9502 li
45.5396 35.6748 li
45.5396 35.123 45.6548 34.5977 46.144 34.5977 cv
46.3218 34.5977 46.437 34.6338 46.5269 34.6699 cv
46.6343 34.1367 li
46.5093 34.0742 46.3306 34.0293 46.0991 34.0293 cv
45.8325 34.0293 45.4858 34.1182 45.2378 34.3936 cv
44.9272 34.75 44.855 35.2207 44.855 35.6924 cv
44.855 35.9502 li
44.312 35.9502 li
44.312 36.4658 li
44.855 36.4658 li
44.855 40.2549 li
45.5396 40.2549 li
45.5396 40.2549 li
cp
43.0503 38.8945 mo
43.0503 38.9746 43.0415 39.0635 43.0229 39.1436 cv
42.9429 39.5703 42.6929 39.7939 42.3921 39.7939 cv
42.1499 39.7939 41.8667 39.5977 41.8667 39.0273 cv
41.8667 38.0938 42.6929 38.0225 43.0503 38.0225 cv
43.0503 38.8945 li
43.0503 38.8945 li
cp
43.7163 37.4092 mo
43.7163 36.4473 43.3511 35.8887 42.4897 35.8887 cv
42.062 35.8887 41.6704 36.0391 41.4839 36.1729 cv
41.6362 36.6523 li
41.8394 36.5107 42.0796 36.4307 42.3472 36.4307 cv
42.8804 36.4307 43.0327 36.8213 43.0327 37.4004 cv
43.0327 37.5342 li
42.062 37.543 41.2007 38.0137 41.2007 39.0986 cv
41.2007 39.8467 41.644 40.3252 42.2134 40.3252 cv
42.5874 40.3252 42.8901 40.1309 43.0767 39.8018 cv
43.103 39.8018 li
43.1479 40.2549 li
43.7612 40.2549 li
43.7241 39.9795 43.7163 39.6064 43.7163 39.2764 cv
43.7163 37.4092 li
43.7163 37.4092 li
cp
37.8208 40.2549 mo
38.5044 40.2549 li
38.5044 37.4707 li
38.5044 37.3633 38.5132 37.2393 38.5308 37.1504 cv
38.6382 36.6963 38.8784 36.4658 39.1987 36.4658 cv
39.6616 36.4658 39.7769 36.9551 39.7769 37.4795 cv
39.7769 40.2549 li
40.4604 40.2549 li
40.4604 37.3994 li
40.4604 36.3145 39.9995 35.8887 39.4565 35.8887 cv
39.2163 35.8887 39.0386 35.9414 38.8862 36.0391 cv
38.7446 36.1377 38.6108 36.2705 38.521 36.4219 cv
38.5044 36.4219 li
38.5044 34.1006 li
37.8208 34.1006 li
37.8208 40.2549 li
37.8208 40.2549 li
cp
37.1069 39.625 mo
36.9565 39.7041 36.7964 39.7393 36.6187 39.7393 cv
35.9878 39.7393 35.605 39.1348 35.605 38.1299 cv
35.605 37.2842 35.9077 36.4658 36.6011 36.4658 cv
36.8237 36.4658 37.0015 36.5361 37.0903 36.582 cv
37.2241 36.0215 li
37.0991 35.9502 36.8511 35.8887 36.6187 35.8887 cv
35.5425 35.8887 34.9214 36.8926 34.9214 38.1299 cv
34.9214 39.5527 35.5522 40.3076 36.4946 40.3076 cv
36.7964 40.3076 37.0542 40.2363 37.2056 40.1484 cv
37.1069 39.625 li
37.1069 39.625 li
cp
32.2261 40.0596 mo
32.4136 40.2109 32.7593 40.3076 33.0708 40.3076 cv
33.7827 40.3076 34.3687 39.8906 34.3687 39.0273 cv
34.3687 38.4316 33.978 38.041 33.48 37.7207 cv
33.0522 37.4268 32.9458 37.2666 32.9458 36.9814 cv
32.9458 36.6963 33.1323 36.4307 33.4976 36.4307 cv
33.73 36.4307 33.9077 36.5107 34.0757 36.626 cv
34.2534 36.1104 li
34.0757 36.0049 33.8276 35.8887 33.4897 35.8887 cv
32.8218 35.8887 32.3062 36.377 32.3062 37.0791 cv
32.3062 37.5684 32.6089 37.9424 33.1685 38.2988 cv
33.605 38.5928 33.7202 38.8145 33.7202 39.1436 cv
33.7202 39.5264 33.4722 39.7666 33.0884 39.7666 cv
32.812 39.7666 32.5464 39.6416 32.396 39.5439 cv
32.2261 40.0596 li
32.2261 40.0596 li
cp
28.8823 40.2549 mo
29.5659 40.2549 li
29.5659 37.5508 li
29.5659 37.3994 29.5747 37.2666 29.6011 37.1592 cv
29.6812 36.7051 29.9575 36.4658 30.2427 36.4658 cv
30.7417 36.4658 30.8384 36.9727 30.8384 37.4883 cv
30.8384 40.2549 li
31.5229 40.2549 li
31.5229 37.3633 li
31.5229 36.3232 31.0786 35.8887 30.4819 35.8887 cv
30.0288 35.8887 29.6812 36.1289 29.4956 36.4746 cv
29.478 36.4746 li
29.4409 35.9502 li
28.8467 35.9502 li
28.8555 36.2979 28.8823 36.5547 28.8823 37.0615 cv
28.8823 40.2549 li
28.8823 40.2549 li
cp
26.1157 37.6582 mo
26.1426 37.0713 26.3647 36.4219 26.8184 36.4219 cv
27.1475 36.4219 27.4688 36.8037 27.4595 37.6582 cv
26.1157 37.6582 li
26.1157 37.6582 li
cp
28.0986 38.1641 mo
28.1074 38.0576 28.1167 37.9424 28.1167 37.7734 cv
28.1167 36.8125 27.7617 35.8887 26.8896 35.8887 cv
26.0264 35.8887 25.4316 36.7598 25.4316 38.1465 cv
25.4316 39.4639 25.9644 40.3076 26.9966 40.3076 cv
27.3438 40.3076 27.7075 40.2275 27.9478 40.1035 cv
27.8325 39.6064 li
27.6636 39.6953 27.4233 39.7666 27.1216 39.7666 cv
26.6313 39.7666 26.1064 39.4902 26.1064 38.1641 cv
28.0986 38.1641 li
28.0986 38.1641 li
cp
22.7456 40.0596 mo
22.9326 40.2109 23.2788 40.3076 23.5894 40.3076 cv
24.3027 40.3076 24.8887 39.8906 24.8887 39.0273 cv
24.8887 38.4316 24.4976 38.041 23.9995 37.7207 cv
23.5718 37.4268 23.4653 37.2666 23.4653 36.9814 cv
23.4653 36.6963 23.6523 36.4307 24.0176 36.4307 cv
24.2485 36.4307 24.4268 36.5107 24.5957 36.626 cv
24.7725 36.1104 li
24.5957 36.0049 24.3467 35.8887 24.0088 35.8887 cv
23.3403 35.8887 22.8257 36.377 22.8257 37.0791 cv
22.8257 37.5684 23.1274 37.9424 23.6875 38.2988 cv
24.1245 38.5928 24.2397 38.8145 24.2397 39.1436 cv
24.2397 39.5264 23.9907 39.7666 23.6074 39.7666 cv
23.3315 39.7666 23.0654 39.6416 22.9146 39.5439 cv
22.7456 40.0596 li
22.7456 40.0596 li
cp
20.1484 40.0596 mo
20.3354 40.2109 20.6816 40.3076 20.9927 40.3076 cv
21.7056 40.3076 22.2915 39.8906 22.2915 39.0273 cv
22.2915 38.4316 21.9004 38.041 21.4023 37.7207 cv
20.9756 37.4268 20.8687 37.2666 20.8687 36.9814 cv
20.8687 36.6963 21.0557 36.4307 21.4204 36.4307 cv
21.6514 36.4307 21.8296 36.5107 21.9985 36.626 cv
22.1758 36.1104 li
21.9985 36.0049 21.7495 35.8887 21.4116 35.8887 cv
20.7437 35.8887 20.2285 36.377 20.2285 37.0791 cv
20.2285 37.5684 20.5308 37.9424 21.0903 38.2988 cv
21.5273 38.5928 21.6436 38.8145 21.6436 39.1436 cv
21.6436 39.5264 21.3936 39.7666 21.0107 39.7666 cv
20.7344 39.7666 20.4688 39.6416 20.3174 39.5439 cv
20.1484 40.0596 li
20.1484 40.0596 li
cp
19.0986 34.3945 mo
18.8765 34.3945 18.6997 34.5723 18.6997 34.8389 cv
18.6997 35.1055 18.8677 35.2822 19.0903 35.2822 cv
19.3477 35.2822 19.5073 35.1055 19.5073 34.8389 cv
19.5073 34.5723 19.3477 34.3945 19.0986 34.3945 cv
19.0986 34.3945 li
cp
19.4546 40.2549 mo
19.4546 35.9502 li
18.7705 35.9502 li
18.7705 40.2549 li
19.4546 40.2549 li
19.4546 40.2549 li
cp
14.6436 40.2549 mo
15.2305 37.3652 li
15.3726 36.6973 15.4795 36.0479 15.5596 35.3711 cv
15.5767 35.3711 li
15.6567 36.0303 15.7637 36.707 15.8887 37.3379 cv
16.4575 40.2549 li
17.1338 40.2549 li
18.2974 34.2617 li
17.6226 34.2617 li
17.1245 37.1152 li
17.0176 37.8008 16.9106 38.4492 16.8125 39.3125 cv
16.7866 39.3125 li
16.7065 38.4766 16.5728 37.792 16.4395 37.0791 cv
15.8794 34.2617 li
15.3018 34.2617 li
14.75 37.1426 li
14.5991 37.9072 14.4653 38.5566 14.3853 39.3125 cv
14.3589 39.3125 li
14.2788 38.5742 14.1899 37.9072 14.0566 37.1504 cv
13.5498 34.2617 li
12.8472 34.2617 li
13.9941 40.2549 li
14.6436 40.2549 li
14.6436 40.2549 li
cp
9.79639 40.2549 mo
10.4805 40.2549 li
10.4805 37.8701 li
10.4805 37.7285 10.4893 37.5957 10.5068 37.4795 cv
10.5781 36.9902 10.8984 36.5908 11.334 36.5908 cv
11.3877 36.5908 11.4316 36.5908 11.4766 36.5908 cv
11.4766 35.8975 li
11.4316 35.8887 11.3877 35.8887 11.334 35.8887 cv
10.9341 35.8887 10.5693 36.2266 10.4268 36.6348 cv
10.4092 36.6348 li
10.3735 35.9502 li
9.76074 35.9502 li
9.77002 36.2715 9.79639 36.6973 9.79639 37.0625 cv
9.79639 40.2549 li
9.79639 40.2549 li
cp
7.03857 37.6582 mo
7.06494 37.0713 7.2876 36.4219 7.7417 36.4219 cv
8.0708 36.4219 8.3916 36.8037 8.38232 37.6582 cv
7.03857 37.6582 li
7.03857 37.6582 li
cp
9.02197 38.1641 mo
9.03076 38.0576 9.03955 37.9424 9.03955 37.7734 cv
9.03955 36.8125 8.68457 35.8887 7.81299 35.8887 cv
6.94971 35.8887 6.35449 36.7598 6.35449 38.1465 cv
6.35449 39.4639 6.8877 40.3076 7.91943 40.3076 cv
8.2666 40.3076 8.63086 40.2275 8.87109 40.1035 cv
8.75537 39.6064 li
8.58643 39.6953 8.34668 39.7666 8.04443 39.7666 cv
7.55469 39.7666 7.02979 39.4902 7.02979 38.1641 cv
9.02197 38.1641 li
9.02197 38.1641 li
cp
4.88721 38.7334 mo
4.88721 38.8418 4.87842 38.9395 4.86035 39.0195 cv
4.70947 39.6416 4.41553 39.7578 4.20215 39.7578 cv
3.70361 39.7578 3.47217 39.0273 3.47217 38.1201 cv
3.47217 37.2666 3.66797 36.4746 4.23779 36.4746 cv
4.56689 36.4746 4.83398 36.8574 4.87842 37.3105 cv
4.88721 37.3994 4.88721 37.5068 4.88721 37.5957 cv
4.88721 38.7334 li
4.88721 38.7334 li
cp
4.88721 34.1006 mo
4.88721 36.3945 li
4.86963 36.3945 li
4.7002 36.0303 4.39795 35.8887 4.07715 35.8887 cv
3.41895 35.8887 2.78809 36.5996 2.78809 38.1201 cv
2.78809 39.5439 3.31201 40.3252 4.03271 40.3252 cv
4.49561 40.3252 4.79834 40.0234 4.94043 39.7217 cv
4.96729 39.7217 li
5.01172 40.2549 li
5.59766 40.2549 li
5.58887 40.0059 5.56201 39.5166 5.56201 39.2227 cv
5.56201 34.1006 li
4.88721 34.1006 li
4.88721 34.1006 li
cp
f
55.896 26.9854 mo
55.9224 26.3984 56.146 25.748 56.5991 25.748 cv
56.9292 25.748 57.2485 26.1318 57.2407 26.9854 cv
55.896 26.9854 li
55.896 26.9854 li
cp
57.8794 27.4912 mo
57.8882 27.3857 57.8979 27.2695 57.8979 27.1016 cv
57.8979 26.1406 57.5415 25.2158 56.6704 25.2158 cv
55.8081 25.2158 55.2124 26.0869 55.2124 27.4736 cv
55.2124 28.792 55.7446 29.6357 56.7769 29.6357 cv
57.1245 29.6357 57.4888 29.5557 57.728 29.4307 cv
57.6128 28.9336 li
57.4448 29.0225 57.2046 29.0938 56.9019 29.0938 cv
56.4126 29.0938 55.8882 28.8174 55.8882 27.4912 cv
57.8794 27.4912 li
57.8794 27.4912 li
cp
54.0737 23.7217 mo
53.8511 23.7217 53.6733 23.8994 53.6733 24.166 cv
53.6733 24.4326 53.8433 24.6104 54.064 24.6104 cv
54.3218 24.6104 54.4819 24.4326 54.4819 24.166 cv
54.4819 23.8994 54.3218 23.7217 54.0737 23.7217 cv
54.0737 23.7217 li
cp
54.4292 29.582 mo
54.4292 25.2783 li
53.7446 25.2783 li
53.7446 29.582 li
54.4292 29.582 li
54.4292 29.582 li
cp
48.2036 29.582 mo
48.8784 29.582 li
48.8784 26.8516 li
48.8784 26.7178 48.8882 26.5938 48.9058 26.4863 cv
48.9858 26.0244 49.2612 25.7842 49.5464 25.7842 cv
50.062 25.7842 50.1421 26.291 50.1421 26.7627 cv
50.1421 29.582 li
50.8179 29.582 li
50.8179 26.8154 li
50.8179 26.6738 50.8267 26.5391 50.8452 26.4336 cv
50.9429 26.0244 51.1909 25.7842 51.4761 25.7842 cv
52.0015 25.7842 52.0815 26.3262 52.0815 26.8867 cv
52.0815 29.582 li
52.7563 29.582 li
52.7563 26.7354 li
52.7563 25.6338 52.3042 25.2158 51.7261 25.2158 cv
51.5034 25.2158 51.2983 25.2695 51.1294 25.3848 cv
50.9683 25.4824 50.8179 25.6592 50.7026 25.873 cv
50.6851 25.873 li
50.5249 25.4023 50.187 25.2158 49.7866 25.2158 cv
49.3325 25.2158 49.0034 25.4648 48.8159 25.8105 cv
48.7983 25.8105 li
48.7632 25.2783 li
48.1685 25.2783 li
48.1772 25.625 48.2036 25.8828 48.2036 26.3896 cv
48.2036 29.582 li
48.2036 29.582 li
cp
45.437 26.9854 mo
45.4634 26.3984 45.687 25.748 46.1401 25.748 cv
46.4702 25.748 46.7896 26.1318 46.7808 26.9854 cv
45.437 26.9854 li
45.437 26.9854 li
cp
47.4204 27.4912 mo
47.4292 27.3857 47.437 27.2695 47.437 27.1016 cv
47.437 26.1406 47.0825 25.2158 46.2114 25.2158 cv
45.3491 25.2158 44.7534 26.0869 44.7534 27.4736 cv
44.7534 28.792 45.2856 29.6357 46.3179 29.6357 cv
46.6655 29.6357 47.0298 29.5557 47.269 29.4307 cv
47.1538 28.9336 li
46.9858 29.0225 46.7456 29.0938 46.4429 29.0938 cv
45.9536 29.0938 45.4272 28.8174 45.4272 27.4912 cv
47.4204 27.4912 li
47.4204 27.4912 li
cp
43.2856 28.0605 mo
43.2856 28.1689 43.2769 28.2666 43.2593 28.3467 cv
43.1069 28.9697 42.814 29.085 42.6011 29.085 cv
42.1011 29.085 41.8706 28.3555 41.8706 27.4473 cv
41.8706 26.5938 42.0659 25.8018 42.6362 25.8018 cv
42.9653 25.8018 43.2319 26.1846 43.2769 26.6387 cv
43.2856 26.7275 43.2856 26.834 43.2856 26.9229 cv
43.2856 28.0605 li
43.2856 28.0605 li
cp
43.2856 23.4287 mo
43.2856 25.7217 li
43.2671 25.7217 li
43.0991 25.3574 42.7964 25.2158 42.4761 25.2158 cv
41.8179 25.2158 41.187 25.9268 41.187 27.4473 cv
41.187 28.8711 41.7104 29.6523 42.4312 29.6523 cv
42.894 29.6523 43.1968 29.3516 43.3394 29.0498 cv
43.3657 29.0498 li
43.4106 29.582 li
43.9966 29.582 li
43.9878 29.333 43.9604 28.8438 43.9604 28.5508 cv
43.9604 23.4287 li
43.2856 23.4287 li
43.2856 23.4287 li
cp
39.7104 28.2217 mo
39.7104 28.3018 39.7017 28.3906 39.6831 28.4707 cv
39.603 28.8975 39.355 29.1201 39.0522 29.1201 cv
38.812 29.1201 38.5269 28.9248 38.5269 28.3545 cv
38.5269 27.4209 39.355 27.3496 39.7104 27.3496 cv
39.7104 28.2217 li
39.7104 28.2217 li
cp
40.3765 26.7363 mo
40.3765 25.7754 40.0132 25.2158 39.1499 25.2158 cv
38.7222 25.2158 38.3315 25.3662 38.144 25.5 cv
38.2954 25.9795 li
38.4995 25.8379 38.7407 25.7578 39.0073 25.7578 cv
39.5415 25.7578 39.6929 26.1494 39.6929 26.7275 cv
39.6929 26.8613 li
38.7222 26.8701 37.8608 27.3408 37.8608 28.4268 cv
37.8608 29.1738 38.3042 29.6523 38.8735 29.6523 cv
39.2476 29.6523 39.5503 29.458 39.7378 29.1299 cv
39.7632 29.1299 li
39.8081 29.582 li
40.4204 29.582 li
40.3862 29.3066 40.3765 28.9336 40.3765 28.6045 cv
40.3765 26.7363 li
40.3765 26.7363 li
cp
35.5562 23.4287 mo
34.8813 23.4287 li
34.8813 29.582 li
35.5562 29.582 li
35.5562 27.9551 li
35.8062 27.5547 li
36.7388 29.582 li
37.5034 29.582 li
36.2593 27.0928 li
37.3979 25.2783 li
36.6587 25.2783 li
35.8062 26.7988 li
35.7261 26.9404 35.6538 27.1094 35.5737 27.2783 cv
35.5562 27.2783 li
35.5562 23.4287 li
35.5562 23.4287 li
cp
31.8921 27.2344 mo
32.2036 25.7139 li
32.2925 25.3135 32.3813 24.7969 32.4526 24.3438 cv
32.48 24.3438 li
32.5503 24.7881 32.6304 25.2861 32.7202 25.7139 cv
33.0308 27.2344 li
31.8921 27.2344 li
31.8921 27.2344 li
cp
33.1284 27.7852 mo
33.519 29.582 li
34.1958 29.582 li
32.8618 23.5889 li
32.105 23.5889 li
30.7358 29.582 li
31.4038 29.582 li
31.7944 27.7852 li
33.1284 27.7852 li
33.1284 27.7852 li
cp
26.8315 26.9854 mo
26.8574 26.3984 27.0806 25.748 27.5347 25.748 cv
27.8638 25.748 28.1846 26.1318 28.1758 26.9854 cv
26.8315 26.9854 li
26.8315 26.9854 li
cp
28.8145 27.4912 mo
28.8237 27.3857 28.8325 27.2695 28.8325 27.1016 cv
28.8325 26.1406 28.4775 25.2158 27.6055 25.2158 cv
26.7427 25.2158 26.1475 26.0869 26.1475 27.4736 cv
26.1475 28.792 26.6807 29.6357 27.7124 29.6357 cv
28.0596 29.6357 28.4233 29.5557 28.6636 29.4307 cv
28.5483 28.9336 li
28.3794 29.0225 28.1396 29.0938 27.8374 29.0938 cv
27.3477 29.0938 26.8228 28.8174 26.8228 27.4912 cv
28.8145 27.4912 li
28.8145 27.4912 li
cp
22.7144 29.582 mo
23.3984 29.582 li
23.3984 26.7979 li
23.3984 26.6914 23.4077 26.5664 23.4248 26.4775 cv
23.5317 26.0244 23.7725 25.793 24.0928 25.793 cv
24.5557 25.793 24.6714 26.2822 24.6714 26.8066 cv
24.6714 29.582 li
25.3545 29.582 li
25.3545 26.7266 li
25.3545 25.6426 24.8936 25.2158 24.3506 25.2158 cv
24.1104 25.2158 23.9326 25.2695 23.7808 25.3662 cv
23.6387 25.4648 23.5044 25.5977 23.4155 25.748 cv
23.3984 25.748 li
23.3984 23.4287 li
22.7144 23.4287 li
22.7144 29.582 li
22.7144 29.582 li
cp
22.0015 28.9512 mo
21.8506 29.0313 21.6904 29.0664 21.5127 29.0664 cv
20.8813 29.0664 20.4985 28.4619 20.4985 27.457 cv
20.4985 26.6113 20.8018 25.793 21.4946 25.793 cv
21.7178 25.793 21.8955 25.8643 21.9844 25.9082 cv
22.1177 25.3496 li
21.9937 25.2783 21.7446 25.2158 21.5127 25.2158 cv
20.4365 25.2158 19.8154 26.2197 19.8154 27.457 cv
19.8154 28.8809 20.4458 29.6357 21.3887 29.6357 cv
21.6904 29.6357 21.9487 29.5645 22.0996 29.4756 cv
22.0015 28.9512 li
22.0015 28.9512 li
cp
17.1206 29.3867 mo
17.3066 29.5371 17.6538 29.6357 17.9644 29.6357 cv
18.6768 29.6357 19.2627 29.2178 19.2627 28.3555 cv
19.2627 27.7598 18.8726 27.3672 18.3745 27.0479 cv
17.9468 26.7539 17.8394 26.5938 17.8394 26.3086 cv
17.8394 26.0244 18.0264 25.7578 18.3916 25.7578 cv
18.6235 25.7578 18.8018 25.8379 18.9697 25.9531 cv
19.1475 25.4375 li
18.9697 25.332 18.7217 25.2158 18.3838 25.2158 cv
17.7153 25.2158 17.2007 25.7051 17.2007 26.4063 cv
17.2007 26.8965 17.5024 27.2695 18.0625 27.626 cv
18.4985 27.9199 18.6147 28.1416 18.6147 28.4707 cv
18.6147 28.8535 18.3657 29.0938 17.9824 29.0938 cv
17.7065 29.0938 17.4404 28.9697 17.2896 28.8711 cv
17.1206 29.3867 li
17.1206 29.3867 li
cp
16.0708 23.7217 mo
15.8486 23.7217 15.6704 23.8994 15.6704 24.166 cv
15.6704 24.4326 15.8394 24.6104 16.0615 24.6104 cv
16.3193 24.6104 16.4795 24.4326 16.4795 24.166 cv
16.4795 23.8994 16.3193 23.7217 16.0708 23.7217 cv
16.0708 23.7217 li
cp
16.4258 29.582 mo
16.4258 25.2783 li
15.7417 25.2783 li
15.7417 29.582 li
16.4258 29.582 li
16.4258 29.582 li
cp
12.8604 29.3867 mo
13.0469 29.5371 13.3936 29.6357 13.7046 29.6357 cv
14.417 29.6357 15.0024 29.2178 15.0024 28.3555 cv
15.0024 27.7598 14.6123 27.3672 14.1143 27.0479 cv
13.6865 26.7539 13.5796 26.5938 13.5796 26.3086 cv
13.5796 26.0244 13.7671 25.7578 14.1318 25.7578 cv
14.3638 25.7578 14.541 25.8379 14.71 25.9531 cv
14.8877 25.4375 li
14.71 25.332 14.4614 25.2158 14.123 25.2158 cv
13.4556 25.2158 12.9404 25.7051 12.9404 26.4063 cv
12.9404 26.8965 13.2427 27.2695 13.8022 27.626 cv
14.2388 27.9199 14.3545 28.1416 14.3545 28.4707 cv
14.3545 28.8535 14.1055 29.0938 13.7222 29.0938 cv
13.4468 29.0938 13.1802 28.9697 13.0293 28.8711 cv
12.8604 29.3867 li
12.8604 29.3867 li
cp
9.5166 29.582 mo
10.2002 29.582 li
10.2002 26.7979 li
10.2002 26.6914 10.209 26.5664 10.2271 26.4775 cv
10.3335 26.0244 10.5737 25.793 10.8945 25.793 cv
11.3574 25.793 11.4731 26.2822 11.4731 26.8066 cv
11.4731 29.582 li
12.1567 29.582 li
12.1567 26.7266 li
12.1567 25.6426 11.6948 25.2158 11.1523 25.2158 cv
10.9121 25.2158 10.7344 25.2695 10.583 25.3662 cv
10.4404 25.4648 10.3071 25.5977 10.2178 25.748 cv
10.2002 25.748 li
10.2002 23.4287 li
9.5166 23.4287 li
9.5166 29.582 li
9.5166 29.582 li
cp
8.80371 28.9512 mo
8.65283 29.0313 8.49268 29.0664 8.31494 29.0664 cv
7.68311 29.0664 7.30078 28.4619 7.30078 27.457 cv
7.30078 26.6113 7.60303 25.793 8.29688 25.793 cv
8.51904 25.793 8.69727 25.8643 8.78613 25.9082 cv
8.91943 25.3496 li
8.79492 25.2783 8.5459 25.2158 8.31494 25.2158 cv
7.23877 25.2158 6.61719 26.2197 6.61719 27.457 cv
6.61719 28.8809 7.24756 29.6357 8.19043 29.6357 cv
8.49268 29.6357 8.75049 29.5645 8.90186 29.4756 cv
8.80371 28.9512 li
8.80371 28.9512 li
cp
5.37158 24.5479 mo
5.59326 24.5479 5.75342 24.3799 5.75342 24.1563 cv
5.75342 23.9268 5.58447 23.7578 5.38037 23.7578 cv
5.1582 23.7578 4.98047 23.9268 4.98047 24.1563 cv
4.98047 24.3799 5.1582 24.5479 5.37158 24.5479 cv
5.37158 24.5479 li
cp
3.98389 24.5479 mo
4.20605 24.5479 4.36572 24.3799 4.36572 24.1563 cv
4.36572 23.9268 4.19727 23.7578 3.99268 23.7578 cv
3.771 23.7578 3.59326 23.9268 3.59326 24.1563 cv
3.59326 24.3799 3.771 24.5479 3.98389 24.5479 cv
3.98389 24.5479 li
cp
5.14063 28.2217 mo
5.14063 28.3018 5.13184 28.3906 5.11426 28.4707 cv
5.03418 28.8975 4.78467 29.1201 4.48193 29.1201 cv
4.2417 29.1201 3.95654 28.9248 3.95654 28.3545 cv
3.95654 27.4209 4.78467 27.3496 5.14063 27.3496 cv
5.14063 28.2217 li
5.14063 28.2217 li
cp
5.80664 26.7363 mo
5.80664 25.7754 5.44238 25.2158 4.58008 25.2158 cv
4.15234 25.2158 3.76123 25.3662 3.5752 25.5 cv
3.72607 25.9795 li
3.93018 25.8379 4.17041 25.7578 4.4375 25.7578 cv
4.97168 25.7578 5.12305 26.1494 5.12305 26.7275 cv
5.12305 26.8613 li
4.15234 26.8701 3.29053 27.3408 3.29053 28.4268 cv
3.29053 29.1738 3.73486 29.6523 4.3042 29.6523 cv
4.67773 29.6523 4.98047 29.458 5.16748 29.1299 cv
5.19385 29.1299 li
5.23828 29.582 li
5.85107 29.582 li
5.81543 29.3066 5.80664 28.9336 5.80664 28.6045 cv
5.80664 26.7363 li
5.80664 26.7363 li
cp
0 29.3779 mo
0.168945 29.502 0.595215 29.6357 1.00439 29.6357 cv
1.96582 29.6357 2.68506 28.9863 2.68506 27.9551 cv
2.68506 27.2871 2.36523 26.7363 1.64502 26.2295 cv
1.07568 25.8193 0.76416 25.5889 0.76416 24.9922 cv
0.76416 24.584 1.04004 24.1387 1.63623 24.1387 cv
1.94775 24.1387 2.19678 24.2363 2.34766 24.3438 cv
2.50732 23.7578 li
2.36523 23.6504 2.0459 23.5342 1.67188 23.5342 cv
0.719727 23.5342 0.0888672 24.2002 0.0888672 25.1084 cv
0.0888672 25.8828 0.737305 26.4424 1.21777 26.7715 cv
1.68994 27.1279 2.01025 27.4658 2.01025 28.0176 cv
2.01025 28.623 1.63623 29.0313 1.00439 29.0313 cv
0.710449 29.0313 0.34668 28.9248 0.151367 28.792 cv
0 29.3779 li
0 29.3779 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Martin Uhlig) ()%%Title: (Logos_Vektor_3z.eps)%%CreationDate: 2/12/10 2:20 PM%AI9_DataStream%Gb"-6=aKY[Z7(#G^`:-JV?_r!Ch$Y"%5ukKmkB`[0s(UYXf@.>RQH8qFPlf1DFUL$*KguY]!^/cc<jpeOAZsYOjRfrdcntOQ]p96%da(_hQ*uHNHQo&e-Q.7d*3hMpQ,,%:f<bf1;opFE$cZ\]UcjhI-;s@^H6=2d`5>1=<,pVtNqpek+\]NGHsW2#VSYH40Ds@lfUque%B_nVi5AGCt2J;G%f&?lYSsp)Ip;3C.12r3^\+7_YW->opGBb9JO"r/o*,4B'mcWt$O*ZHIjRU9c4'M@Q#3qE@?&[1u3S[04nFn9E%=<QrB!\D3jE:mI9ie=Oms1)JUmJ38BL^6@so'RZLhsoa[W4h-2i)@a*bT73L_+6<rfDH?;UXA#.Cbj($&da5=0GTR:m'/s1>X4O-%.nS/qVA9-OJH%EB^M7rtPJqYC9h*kSF:"@U_P0'c)\"oqM?UnS=PTL,U:EOQ613V_8%`e*)(`ioEu-:R_:>p5NtCSS0ANK8`*i(a%XSbX.gpMi"^Hf+h*A&([kp27U6+hoKUXoF&(M!O=)*b[$5%)#*nL/""Lcq#^,6Ul9_0A)6Yd<;5gn%&)m,9o.L9@`p/;lg#UjqS;%qP$4fBY#*q!pd^r5FA68'GIUS0^-WBRL%Z3j9'TE9Ig$;dJjNaB]P'T57u:5>ZS@tqdGlM<KdEmqaQN'Bb(d.fJ)SLN5PbUP33Dq%`V-#8Qbs)>L&[K&s47=^NC!Rg&bq=*iA6aNcU*1hNC;]C,Q`07&\&d:OLlJ;:Qq^9EG1')(5G\!'ot__Gb!f-T;`O38Yr(S$N5UT%;^lCF8jP!&#+s8B:k2T#!^'U6^n!dmg2J%ejg]OTT&r#BcZ/"`Jhb*.i'SWM]C7)Z+$geH5+r^M#sP$tN/<RZgk-3T-a\F:_'b22%;M%"=@tIMO"XAUpk_[ZCoF)sr:Dc%gKrZmSJ4Z\2i'T"3(OSOgNe;+hIK4FU@mWUN-28`]P*$FE$17pT!Z`tmF$s5oJ'\PB#G9?V%R6`TCEf\E]r.S0*5!$T7.ca_L++1pY(`f#op`u6E(&3G_0L#7WZUhTZd$;BOLm/,EF36^hc3SlPlHkF8NREN>S6ukp'>+TUdPIFI%dXqIN2D@27R4p[HRZ*]jL%2u,Zm,DWj!-B(cb_':J^N/@Pd@@U&BYRjKY&ZD;dQ0Q#+-'!+hU)%K$Gg=42HqRS\QOn"3g"gd'42<%TbW8VH7.%&qrAj8S4G!cAhrP&2P^Qfs!.Fl907F=k+pET9,=@fbkm(*.Gr>H#>`N*6mZ-1AP-NZ*WREW8U+F9#/uke9Au%_ace:!%i.(6_BLPu"(ClWjnmCr@)C</[^Z;$3)2jV-nmCr@OW_F#^Z8`W8U`%N'R!CPQckLQnmCr@T-qD8^Z;$3=Y,^dnmCsk<$K*=^Z6I]%r?M.YjpjSs]TV1E(\s!/(QK9*0s2@%3A)2k-2%7-`]b8+NR7^h41Z1Rf549*9<K+%rT98Z3/4&^EQZ$i5*k8e9U)o?!,X`5]1A.q%kE;V_gc@+fNQJp[;7I-AJM<;ATVq:oA-=bA1-)i`M<7Ef^/F_4Nl_CcZo+$PgrWjMZd`n+Xrne.UN*2&H\>ml5r6Ea\4)!75u4a0%%!2[J%+0[MQ!t_]$@epT(>>LN8Z]]/C!5PA'<[A4[q%<BN=,.T3fn@Aqsqg;*2-V/KU6/cC`$Xp:)(f-4=_P2@VZ9rMTcAl84H-C%KF&\W4@?hUglc4$S2cE^Fl?OW$3.oUi]]?m*;L%n$.W]bUj)`9;T8l)Jc:H)#URDq=En#d-Of_U*1/tE!fp^T$3&7j1/B%Fifcun%aT%K>oEe4E'Mt+hNFiU.P9@-G2-_lP6L/0HE'O7(=OM-3=7IQ(0leR;Uc@I.9%bB^V>j0k+)$^G/1UA39(WBf3YME;ZNN':ha\ZT%Jf+Y];@?Nk:th(QW;NGRmpt3uX?]2l<`m3cXMI@lAUpnU1Z^6H9c3U+fT[(kOegWc1T'6NYXEb.,09^_Cl!J>nPRWD/iKXEO]+-i%-u^X"iY%Ps6,!q(A.SFXY0<+US'%.n\.G*%Zr,$]i<oOOU@Udm/^fB6!V`CBO,>i7T?]C='!7i`="F&6U)GJC>Hf$k@:d^b/OUj$%ZrJB/X[*U!`j"#?hr%G'-[:6u/]P\u,c@<Yi&_:6a;%R8jo73Qn^B0mo"RMpKdh^028\p&asi5FKGGOF&KWl(?t!fOitW:\@)fY:%'uHs)nd:MBD0\R9:b02aWaun@>_/#;/L,88<j"#g)8[sUP&4(>aL4L/3p'TM/?k:a2WGfe6^<f;I8W6PA"n#lF#(9:Ya'8U[OB.j%$<\j8P#@HSMgi]G_l^b<&Nbc\/aP^;0CXFTIn;05$VCf>q>W-db+149"eHM/&hAd?E(S0B7)uD+T4fS=ru,gNAG!V>g\Cdm#I06Q%1JbAY&]Th/En#uk'0cPH91d_hB.'r3`cA@L7/-p>8+XR931's;Xd4bRb2eEBM<DQCr%Z\gR*p[N/[ksEco6\#<BQ`nraLQ)2LZ/6%9H8QCYpZ,rhXS';82p(/!%-YgJ;LN@'<dS+7H8!9oMLFmP6iFA`+N+aGS(b]bd!KB,:qqu7S'm:H'5O9Nt9'e.\9@29]6qL;3m1e%p<mp`6!Hj9[n#Yc`"0='d8,UDG_F@Q*l\+&)"T#M@?P@9OX>Cf`Q7Z/Ih4,$1anYU,1SZM,L6Aa/#Xb'6L@K"8Rhk1<h_ch/4k46%V3[tS>a0/mpqK3aM(MW4KkOC1hP@`T:mUm6\R\*eGXr7bEJYn(.43%=1`hf3,TShW!l%0>Nj4=@LgC>@68Th(*6h]EqCOJI5X1,\%>E[!H1d6P==9BiuCa-jZ(R\2g3AIrnj[@o71I5k-7%mSPA$1h(0/A<TU3$X];FFO--0\)8.RS#;U.orf?q4f07K=%!Linkca7i$h%6(_(i-SZ^;%@/KZ<g!oPapGn:gk/.\b)dT)M@pi(d`.*oOA_66$^i_(*tTZ%,"XlI3Cn(>1eNos?kM&\Zm_sfF^RC)KM?.m9?C;Z%pq\V6%G26IEO6d`j+q^9$#r/J&P,e4VO19mMp=E"-bTLR9ZO)j*LTj!2/$N^F&A^NLnr5m&?<fnKXLlI@#pmS;0imZ`f_NIKfP!2%jM&RC/Q#8shp<V15'``=9,KVXBrKV%,7lj8X<?bu=I>n9WZ\\TP8'E4'aJ]":4Ur,CQ>M_<99=#E0NO=Oa\,l^eQA`!F%g6=6XoX%B:mBb\IRC]kFXq(\Wb)XI?Mf.m_)"Y!Egmtp*kEpV(B_$!$$qP@d3Y:CrPb)H]ii7V#W/8-,9f`'FNYdHmXGhN65:*Os*\8B]kn!%0)//R>hg.?AVF\5,(Hkh8BEV^B,dG>Gp078dHo7S;F-fXr1mr-#o4`80N:YK8o"JsWMbPb-I/h0]h9!`;G!Rq_]=>eBL/ES[lCDp%@Y"gpl)[_j21>b#=.0-tK/Hbrr<V?f:512r*n-71P[diVY:)u@9P[Lc_'4^o/PN^8r.XsDOEI@e<GDk53BAX$ILY^2YOjc=4d]rc%*f':$2+hqi-`P?)ZZ8rS6aa%D0.,Bc2(sco-:/kbSX^t^"OT'U*e@?;h>t$tU]nskKqt)WQLZX*"q:Xf!G`fG@IPA;p4`=\fkZW-%"*Y(5WJ)Z:'4`JS1!+'d@6Y(jDG9#/6#KlMmtic)9_,\9M[F[-ee%fI-uD];&Ju@G'_1lbhlK4R;.#=DR0ao;Nf4duRI&a.%ZmnH%7U_hjaW;B5,I[gOXc5&#^:?A:(VpeTc`j-^Qm.$tH/`V6/)lAY<B-`"WV?t2mBWRcqMo*1__Su9?_#1Sa_6GS$>[g^h+ks]]euOH%C$s[:$mu>D;Vtg+I:Fq0(hP%q+H7Iimno0Cf`RIe4IR:R0]cu,&saa(Uo;ToF[aG$D#j7+0bu)#Yn?dW4:!qX)Q=A\KX@ONbPo%_%s%?8h^-k+Y=ng,;6F+tj@YURP72o)BM$6@RMJrdR!Un*TB%dX?`U^Ys;Jo:tnIl30NC(<'P%gSX=8#E8?a3!MJ/BqYP5!;E;(J%<%;>[Rs^QJF4SLkaejH@I%V*2t)NnR$mSYI&6fi(i88]llDho(-j*Y$@E;I:Z7UmYPcS<>To)hP7[[u7\J`XgR^WcVa<g-jjZW["Lh%,Xs"M8m*oqlKceV9(KSR@\!cU)NW!Z8`*DVe/p-<UC-:#;SSZH7&7!f7sbqqNCZ)&Jl=M+OgtPi(:Bn#F!lj4U*V9(`+!*b*k)5)%=12tq%hL0:qTRH)'k8J&r%dE/0;j60+Su;aQjnD].I?_(08mm^[`pOeAC<a&Lo)?eX'DtU*g[k=6Jom5?>ZLPT7jK9pF6%OU/Rlo%8Fh=A*9DUcK:Jf'&gItf>gicrY>TD>(Q?%%OWVO7:iQpWqB?mfIu0\WH)4B4bZ.WjYl/0*em=A&eM.'g6&^.9^QQ_uQ4_4td%B-a%KK7-eO<02]Q=j9ZQg*kVUeD)T>OXVWf+TJd#(0,9%^IBZ7<qH[&qDP)"^Pu=&ES2&7k%Uj/AoDi,X+DKC,esC4/-pienM,(X*Rsg%]d*e_pq8E(G)A#e8h[Jl%@U+aqCT"CP.;@=0d_8.b#k63LW!]f=d4=tb,IFC(o7ipc\Uk#4?e(NXOA]t##T8+:GYbR2jnH]h.<cn%S<'mX;\OR38(TT<VO0)ub)s'nT-AZUMT8WSgu6"ie8g$UqiZO98d)RbO$r.El[q?'*6jAG^QaY@a%7K`3AX0G*[I)&f64"'QQ3tQ%^Gr202lG07&P91Lfe_%QO_0hk7EJ/Be,uVY7%tB>g)JFbnuO$Q_;bWW,3CsIil=k+>?pd>4rX!N,qk(W@*;k8hBsMMJ;HJ%a;NL:%-gU'i)6D/ZfK5Gl%Ql,TjQ$^ui>1]5Oo6jU-J1O13+5@WghIA=BU%4@NooaSl76\&P9L@qp!rt)LNd!s5'*MgU*StME=WKNQ\gJ<%'7#UMp8&cZSGZWNp/.QdLrU$jM1X%rmG\\$/;UluB&U]-iu29iqRY0tP]R:9QQXj-a&2+h9B\)KPC5I.Oi5GZfsqgMlQSs'Uap-P%360-=69$b6Q"*,-5:fZ,<pkhF4JFR`QP-,tPUDQ2eQ?>H#bK0tjJ<PSPfUc%>-)7en_GUME%uhfjQqdSD^hil.;b,$QR-9=WAc'^%9Qe(60e!ju^59#5&L!-@A6gK[2TEl84GG!kT7^6A0rH\i;)o"2qsJ]GXsE1%C&Te)QT[u:Kp=L(X=Rl(<E-XD;oj&LJD:fZ4Xs6/%jK0iD.f2r_0`r2)gem/Q?lqBT;dK$%3QdiNb_Vj_'GH=cBJ_'^YO&Z47nbM6Qp2C^4E7`*p&)t-=(W%YhEdUfW+98SI9?\*=o26=%ZNQ-Ip8FTTismON@a7\V]4cjLY+CPJ@C0KU.7pb1<lXBq1r\04YrH,aBJ(nanh8MpP"$Rps.!VXUjW>u;i(WE*[I&IQ@\h5@dH_T%A"Oh*@`8-T=X\+in28i3d<_-uO188fFpCYBpI%1u`X60E+fFg)9&_^bTAiF&P$fNoH>&IJ=6)Fe$EhEnZ/1_P3uOg'p7;ui2-@!6%SBfQY#GhF]>@BRI)NHg0&nhR"dBl^;8`0'/-GN[.8@\j%h7B2Peq48C+kWsfSRecU>,#54@Cht79YRA^GHNmlnFf=unSQU5pdoDl%Z&@4SPQ$@[FMF0+5!K@d/EcE>hrAEh3C5<4K0T-]W^3jPR!DA6g^-f+d^Rgi5C@YU?okXfEm@Gp?N\R7@)9&8X4`2I$c/DNQLf%l%h/k]@cu./(^Ba/RCbV:K,7WAlH]Pfnr0q'es2T]N7Vr1N$,28-_*?=S4?rc)CW(FP(2-Z\O%+c9d%5Xr\pB`Fjnl\CqR")*FPlp+%)OOorqLih=.eKe'*&Z)u]:@(]rrE[P_SR-nIPC'cLVdg*2==..KDAV]ElAdah3@p>c`[B/<Pa^W=m?6r"*N2XkPX?."lf0R!.E!#%=B,>irX1k=b6YX^Gmd+TUX=t1P-3Q+PFh^R;*od`J;ONM)RUr0_2b]t8BUr!(DF_gmGVODLOIr!@=8@V&TK'o^/G!9(=Li-SK%p&%/*dn["3#PD^IJ.V(91-,InoJDHeRV2D(aP+?<cX,HgIHlp6`>dD5$*"4<*gt%:cTr(pP'!Lq_^!BPCf'7LSi*qpSp9a!LTQK.d+:%O4pf(YO@F`LTWhsg7XJoWFlUtdF_62p(3r]qMR'r6^$tD43.W#%MDZu7&+6JWf@4Hk-gPDa[Xn5a@ed3?^m.]2OH-sFB]UcDR%Gs%Yme03U]\4(?fGYHOliB(k9@4=C6Q.-XUtGjVA"Cf\kkH@(B,MmT<;q\diP]>o>L(rf6B,<[f]/[$A6WE_'AR>LSd'tB`J+]`?+kW%[-E)b>pk/]6(>)AKS3.8$Qk;AAj!Wi5+]u&J$aq*#ni=Hl5_l,Wht9Q7n_POY0RR29os=VAg/RCeZ]!Ll:e&gh?%+T;rhffXAFY[%o`)8Xl3qW'3GW&>LcLRKI#SB9IXK;hH^apS.D_HN_UA2amEUNs_Y@nZofl$pdskI8F_LU^F#4</MnI[+pn-)Is#rV?,JOfc/R\13%Lfn<0J%Jr.>lFu%npc7UcG0AV+)Hr:@54.1#2T<$>oX4W'267a]&hZkj,nf^KDr=pfofP<ZRRr##UWK,e@K)e3Tr'/Xc,kgps0G-%^2IZ/T`/Lo%fbe081tEU1Rc([N97<nH8J0VjJPq?@<A@Sj:9]7Y6B3*NKmAC54_"SoOFHDS1]LJO'`+aO5#+oU&Ja?`r)Re6a"e=%GbfN$j00on*is=IU+q,lokL^5N-Ko_kE]JMs8LpIjeNETWr'o2Mk6dDjXsZd0',(^)MVOFR1_1*)ZjOWm;gFi:r0rn;3:LfHjXf?%Z?IE[NqsLR+i[?$OLn':YP@q&rO*/<i5+;fOCc'%1+Lc@LD(BU:6u?8T-OH2BnT?+?=,<sW.B6g<9W:lL!ZF8B5KJ.h7le$K:[KT%pfe^a;IkoWU2=+:FJ`oKBCE]Q\*PXakL++o^;*Zr=PHlLiHm*q%4@->L(suqD5oj/D-I;I<](JV%>6rjq]5^?KtYtT/D?Z2BX%8)%RPh@n<F2]5-iIVgceBDf)4`gj.Z_O49[;A*Sq[oumJ0S2dsO&ZBNhf6"&WbZkTon7K:k2?nHp22+N[:E!XZkU.WNZ^K;\(Bp'_8D%Hn\leg+jJLL(mmh*Fo,4KP<oT3;nIGArqA0YB%>I!Q=N'_1]9N&Co%;mZ%K-KEB)2s$Dq%8%;ahHbL&g6Y^RB7PU1NecI0ri"*Q6%5^_!oO4of#UjCDCFf.Qen#]?f4`ihmW,Aq6qG*nC/aS)r*l2rY="JH8fNU<JVHQZe^;>%MPpRtR8Mf/1!5p@C`4Aq].j7P5BhFa;%oK^Ee=,pL]gdpb:d-_?np"P\%W9lDK8>W]76T(6bS3S.4ntgcU)AuY(WR8(F#L_7l&?B[6,/5t"r1]u'BkEc@V"pl%,>YEhfm5!`%BSU,Z/(>REa2flj,VMiR3U>A/HMKH8:>"IZ(X5"RmP((8K[X@aM8"79D5jDER5"RXN2X(d%h^T\5EK`jE_4BSoBBr,irQ0WG6Pd0%0adXLYP*"D^bWof)TlpR4Zk("QX("Mccg]#_U6:W;R;tVc:J(4H@hD+%;!H19F)-dc(MlbEjMmU>YJcea@qu1']`(MafsoEM6el"%i74]1B`$ublYFd!ei!?U1g?[<ca8=<3ZmuAD3ZoRgCR.t7s+IV2H91MBtO)O1K]Uj1\7K>NNh^AXU<*>#^3*ZA0)LomnHW4QBE-M%^tWKrg'YOO;ui2iL/?7d$gG_#WURCNMpSoL(/*>Ic6NHjK]/jm$[u;rpP1J@Zi51d7,C0![]RX^IXh]c4I]BC5uY3//>W(PL1@f"%%o&0WK7Qj0<X_it+TWHS^8>\7JKKO"P;O"B`Wk:$V_-+eLl32rP4:[\9a^i,Ts:C;/@8D*#n*l#C*IQJ*7j'2C90!DQE[gE<e7Z4%ef*YY1+-Fm7Be_>$")/<RGcBQ61FZ22OKt0nN;W7+*aOoe5YBCXL.oW/1>1s$hc[S>5#(s+k09:67OYDU`K!(NI)@c_H\\+\u#Th%UE92XD@@D0)C2WPNrLl`I<*6iig]cG\cbM]LStSjYg>irj.^urkplumF0\\77`.]tPc88=E@H"Em<8UrkTFLR!?+W9Lq%5B(@#J*%bZ,LJ?'UR.1:k+jP#oa3NGoZLP!0'8Vnu0[Nl`oPZ%3J_l\u0bo7nNedr.,4[RWIICMc-HK1$X&7btgQfG(gZ:?H.67;WfmOd&*d%eG"%:/@;8`f!4Q-L-TmW*m-m1WMW(mc$\3<UPe99Y7^d>5;H5XSH/jDVG/Cb+5+Lqbf1)!'tJ,oo/7g/e8CbMX?Z6JFMHQn'Qq\q%[+(&u-s8n`o\:^f**#!$,6`u&/Q5A+STRYs#2EU(13D<E\(iN#Wp.<(KSe,`::c`j!cHhc9P?=WNosJI.CJ]&Pa-m.8WL6d6d302%oMLD4G:Q-VDPG6FXlN2u;ZMbR.iHd(?sJ3233GMq,1<ZC'<ZmuoAO)3h#<.el%<RLP!NO%"(2ek#;%+3DD-5tC0s^tYW#QJCBYa#%pbcSe1O<>PZ(?AJ_dS'pUWBi6G.]N"oPgaLd6dr]i+p+9`g!m$@8u<1eB_@Ap`"`q!UHfNAD6ttVIR>"rGt<6W)O!8;5o>g#,K/_%QA,$>nl,=jOBcGpLC#J.>2c56$J:[I\$Rk1%F"/W"XlP]\[+6<[[\L"H]TT+F3#2@g'_phL5@EUT<%"B!/JXZ',H'mL#Lie\MUT(%<EEd$f4S+ne`>[He$:-Zen2$COoa2dNfUAp5Zj.31EE]gR7pMC=okk7.^dq\hl_gc$m3]s$T/BcX@Z9%e.Q+;-<M&8p]e#K5@l1?%"r"!NfVn&A!li5@@N,Q'p+3*"d=%14QPn%QCM>&0'=B,a!$@T8M;Fulk@0+9K5A_1J-A,iHD*JHbBsEK,lFJ:jMBZT%44FmWfkSJ%:0;<X_*rg5n7o#qh?L9`5YB/ngY#50GC]h,'*dJI8<9,r2.,,Ha38&sF:as-ePn/$R`m6VhZHJpb$?U=h#gQrl&cHH>$2KfH`DoH%+/CA_b]+$>@Wb.Tb2f$88)MX<4H)?j7(A7D\k9mLaIU\Lc$0WML+^`PV`bgT]J:@=f^tKuYNHh#7_)Ia>-RK-Z9++p#>X,2cerQk%pedH:YpM68,[:/4/=CghYYkWIN`#3g0P>l/<&O]FZ*WMF>BJZm*)&/+:oGS=MH9+4W46o.\D0eQ_I?*rOf>jPP3VHZ;VLh)!b1U-%+Cl_@b7>r@'1&'.8qu^RIP?KXg-PJ&(FF<I'Bpfs*=*@A65\A0UU_C2#Sa1(]X&gg'mtMj>$-+bFcHIGH$`-9[GR#496]d!TD@ig%ru\3!*DD\_m*d#d#2mOFjSg@J3"r0;TfjIOs$TZ_*OP!^p5;KS05r)9gB,53$%m[(huC=c%:=&rn3=dis53kFBJJ`B'MF,+r9llG%mLV<"W%9;:IY]1dfX\?p>.-V#@5(ole>&HlKs0Wf<>'J1F^>cCUAg!R;3:4(5fAOO1g(>fU#5;-Y_"[M37#"E-;Z++YEN1J>lojn%PWF(?X^ofejTdW8br#kF(WfdALI&`#k^!.%eT^k7juR3@q(Eu5oft\kPfM\Grkrfu3W*br@F,M0O5fo!;Z&5>]e=$$U?CdpS*MOS%/@u4k'Y[1#fkC#>@HPP$@c,KOAPYLAhX%4k2UB[LiK2<P4fLFEg?<R>moOCAg!_A,/.BfZh-r)%lE>`<opuc.7$2Pf'//H9n`N%W%I0o[ij(WA%]4`h2I@9lhOt0"_*qMT@f;$Snr*h9?\t'if;I>99S(G.)>p8uN$rkn4rLQ.mEpq]R4?3$LrQZ_P0)*(r:/!5,'6tV;%YP6(*IZtj9V8)TYMo'\tKiO8qo=3FaCVSQOF4VZ$#GF75I.TY#khGWGnY16da9Rkm8%E6iE'eMgCA4#PBBmP)l^#,e)gC7&g,_7=%3?uSYr3cRRQS#`8\H9P<Af`Q8^JDGsp(4qII&4%#2hB1.Tlra>*.=[h+.'\=aEd1\#emcZY1>`7"oLO:PKRl(_=$CC4e%p_?";dF%eO_/DIQJJo&u#,&,U[[e=PkgW8j.?UQh(GM[Y0Q74@Y]EH;FmTdJU:OBC:;Bc]8]u0c@fKc'^.gS/sk[r2J<gc-+(Ar%O<_9L!p&%&&$S:\9%G*]?O$>BL%uqpCO4_2?"H-R/id5q4T/W&6\Uu=(BnW_lI7FI<s*tHnPOdM8P;`g^A"/F#';=M^\SmbAaB=\'rAqPr(/h%9:r#dn8n@+Z0i:cb@F6EE:LSj-MI%UG'_U6\c0B#.3XZHX63t:'\"O\.3\15,J^n:DP7Xa`ReRZI'JAsNAT%.2#\-fl/qDk5JH,Y%W;9_5[p;N"Gj#&QeSm_.kN[bKU\N@Zr+:H9ds[]A++:k=&RrJmHS;32l[-]CT5o(Wq"*,f%"@30PHV6tcP=1,/0\Ka1Qf379kARk%k3ogKX4P!aY3>+M$#M)a$1FYB?d+*\^@R-R0,[S5Snr%8mM6&<]?A06F_D]9.d0,Fi^n+9Y*qn%l@jr:=aK<mqr,lMo-2)cAL!QG%:-VOb,2s*9hj9t45.#C-VQ=fIksQ*.3WG[(0pU*fP]XL<Q#j'#(3@^!Dg(]n\\G/\*-6H#')!;nS.\6>jG5I-;`s5,Sp:\#n_7Ko%<ss%(V]l.dSq;]2Q?p??=X6u,@l1P[:SIeoRO:kApU@]O9DD@G#E?mi6.P]q\J4OW;L29))Y2F1c'c2UlM6NraeXgig@J,O>MN-(%Y5Fgb6:+TX1Z<BHC6`iU%F3E>ST)R#9A#R[Ig0^aH!G#^h(Pp1N$\&b5lC^6S02$]n7/-1d-&WBs&o!6q9e83R_/HG3^R+OI8U<V%P(.cuk)KP#fA,cF[gP@mI[lJrC>VE`HAZ(48fV8$r?b^Po^GhR.NAJf^>DAhD#`i.'`;UK'E*C(h)i5iFh?\hmG7(Vq(iAJ@Z;]R%!X(s+5J:T&o0`7g^n$co[mIR=gj7^IRNPh/:t@2H=dIiU^Q5[sdG.0\ls:t6#X,o4E^0Ba41U`.+cY;@N9/aSkV^ui]I\k_;n:6@%Br)A/9g0Y\(8r8:fp?8#f3I0$jh&#WdUVLX3%K+"a(2WCo'*?MT%=@67&&C!A1iZ3k=jDhj3U:LcW&S(Nk'O$99F/RL?JIMI;@:N%n-s7X./4[-olBSUqI09"$hmRhnI568[^5TR5`r[t:rm-c_inhk+7)c(2o/=>MY')Y7`=<Z>h.NlN=(g"N:O.K"2KsjFHD$4U8qTA%6]oD])j)1s^#BB21>ZPTG`_FDPAc?)^)UEUnqqW?`@r\P2C94-Q;[^&;*Q?;?4L=`b'n<eSp6f(#E;k5$O2+VijqTU`.$Ecjac#e%8_I@?%>b^NFqQU0Vd$t[,/lt84CpI?d$<jCERZD[WA,[)D\Y&?)^W1!W(i@@]MX%SC<0+W?DQhOa0O1\j0%lI8n^"/>-T2<OEc'c%\/(ck*G#Q],D'o[V%SN#8Fds7LA=7&9Vet_Pi5R^o*ud^rClktP5oPJj;#]Z.0p>X=#=LA=,X,26);O$_cfiLb2S;Pkd=BQ<CKm#%CDr4'\CUH7-_8Ps/Gg&e=r&1h:Lf7^.2@j4=HLa):=d=&*S8G1,V!7T+DY/\!+[LFb*5WJ>e[1#8oO.cTfV/<0)c=a&78kB*D5E?%a9;6Qgum4/RWE_+h[JC6-`IIc33kQ,6W>%;*tRi;Ku$80>Nu]JO,8QiGU]md_`17dH8E9*j!`#Rlj#Z9`1q-RGhuu[W=%XP_sE$!%SLT"?DdSCPl>KuhTR;[Dh+ik#D"C$XTNH!RC8(EA8<U]!7]k.T-T@=ZPImLjcRXli+(h@Ps"9OsqniG'36LAFr?C\^<>7(?h;pC<%PJuYuS\)@A>qoBVDh90>#anU9DYg3]"mY"pMB3.!6W^a83P[.q6@d^H*:Y/DJ)co/o8!W6V+kHkN?]M*>Jf;h,d%KR5DF4:P8ja[%MDtk8cCsHF4^I3TGH@[*fTeL&_-Z$u!u=V@!^-0p#Zu%f:4opr)i?2Hq7$e5n9"4[fiN+k`qd?a?8ck-AeR4I;MI/um5+9IY^#]%%BPY[9&jJ=S+ARA&ea@JNq^Q'!,b8+<N+*MgcV-IhPm!bM+3",\R\3"<?knLgojW41jH4]CS3jBSMn]!'jk2pIQ1CJ6YLVI[$t>i-%(C$=DNj:k@D#`,LA@o>6ol0W]OV.cS4"lYN22n][-%oW[LP>1U7iJ)VC=1^a&#/"eX81_>%n/F:YGaDr+D)PONK<ukI--N/8aO`u%HfG\?dr_Pr^#OD+[.G,u`%8`Q]R(1"dU`.kG,E8N_H6`3d&YEZ9QY':q3sj^&b\>JY=1jGcd(=jFn5W#G^AE?-R(=`oU&2YQ^n=Z%Rfu=DH(>bq+krN5Y]kjr)3W/M_Y:ag),4I$SmqaJbk]@."H<TI.oj)UoNe*N/,ABac`mEG\O/4ZY91=)8MqXH\;U=j#<?n8jNe/<%QPIg3nOIFkUokb9f];KqOEJ.r\<b2*%:bB.:HKY^m,O)o3;r5[%ZpKZrEqfjB]kYn80q*F'YL%VINc"X:j/'YUno?OWm3)4<hqYo%cQ.oZ:aNfr,-T.-7*]AdnuF.O$:I.*;1pt..LbHlGk!<RMO^itDZTU1b`5jt*[nV5E?NG!V)Q8W$e5i,P%Ko<CX2P,=QHL.CldlB%Zg)\:fGgadPl9AB./Z;BMM91rTk@cua95(`JXECVZWN[r4Q]'n<>qS/.!Wq0DOV<mm7:UA-f7S!&*GIgORsRHhu&76Z<5ush]]*@%5B7r?Ub9IFoLkb%b<YI4@#b,B;Z`],Y4WAo?-ShDjgI22QAO']M(a;,4"]N_S:JKPns$^Ljt.BlVf%RtHqY/[5Qi/hbatE`*u?TM%K@bM;i@1/+nM^6SgH-KYG*_#!q'"K+YbQfGP.3![TU^^n(U#\L3#f?:&^nt&9g.R$GK33JY'#!e>l6q\b)_]Uro0d/j-H5Td?!KQ%LIb_Uo@1Uuf2;-DkoYaIUWA8Jc:^?>r(Cb\@'4+Dr($J>BX*XAf?b6+*UuRX]?SCaJcYZOSpcrX\Tf]uMHrdH'dnI6I_NPE"4td4%Ep<K^Y4u8ll4$J<0'56@T>&%]9gjo@C@pFY>^'!/RXS$,&'kfbkL.u\P<m;TI:87MN3Tp*N-d4=(L@obq]QkIbsU-q31M3tEqN/>%O7W-F\Sti!31'P(Oc.;TLu<MHDY*<KRcNh=_E/GlJdEXl50iYtMV<[tk9,TAZPnmsEPIdfii!WVSR?FU57S^QYNG#T0K;%L+i]Pn%F-Fhe<+e6ZK]VLJmOWMR'nZ$$lKM2(H]k!M4`:q=;g27JUm@[;Zan#$n%/:Zq@&Wqpr0LmSuEgJFbf>_a)c.p?2&)9"ke<mho-Dg%AE4>#k8+I0b+-EqH45rTk"9j.7-YQ"NNM3lc+HX_KnsLJXB6Y?hWG7!rb^c\N4m</6Go=jOk:rBrQ.7Y?*q/ki^/2*d_pnGg%6NH%cR*9k99JXA67IUO?9DGJM]1KAYo8Xe\9ThRd*$-KF>`c'''2aZpZ:I=RO6D']l@`rg&E#0*C%TtLTe=dU@1eRE`ih-p&`q>p!6In%S>2.Wp]3<&LatNL\GkX-[JUlp539om!p1DT^A3gc8nuab(WfOR08l*Vq7Pq[E2?LZOn0Xaiq%);>gL>hq;p`=)6i'mIX&`@Od:nd%Oe[(9!rI!cTO<iV)Cm*&@fH@0G&iUX<]L"Z'YgM3:krIXaD1E3Y[mCE'u%s<X5``BJF)\MJc[P?GP(M`@)B2-GHmZXo#Sd@`CXgR%qsZA-\io$-(VN<E0&Joa4;I\@%gWo95-9j(Ghns%9K7;c5#M+\jFtiK:mcYpbarEYLIt^FD@lZq$RrYpk5L]ljuutk`<+R/:_]uH%$>tICr8>G9Lr].(dK*F=Pe+++JfG&BFGT&$-(7mTRY0cmDOUH+dJ!VEdCl!e*MD(mmD=jq-`3NMnjQl+GB_(;99O&0p,8h+nYMa>%ZTpj)2p!f5F7'5eeL+;\4q"W)[PI`VNVudpl/IA]b0S`Q?B<%]L%"C!7?6&-@E#7d^#qnBlk'^R`:_M;XB?g]9@+Kal+koM+H9?g%K".h*R/CVSqpYi>C827(Q/b0.e6u*X8j?MG0huWI7Vs1^3t>[.LrnIJCQ"q%rnF3>dVpYo/__'Mjg`f'Lqb/UCQ9A9=%_=M1^58r%>Iglp5l'JVI!gkSpRetL(XdO.=%HhfJpR>]iYT_73-d(Nl7O/&i($&YDU<Qp.jTl",6XDBRR2JISrPc@k%)R=f65_%OZOi*^P1uO%lB<'Lbkrb5X%,:F1\Zml)<-iqRkll\9V71p/T&G67\MfiOmu:,n^K5RP3)K@<n%5Aq_IY;@.2/-'0^h,7Us1*-m<5Pa.aAqhW;0!%Eg]RDApoA1^^BhtVHlL%hNU%r>4R8GohN3>OQ$Qqqgt4_rl_1-aP1TQ>dg7F_<`iDHL(AcNl,0s$&A\d&-G(MO[!l4Q#$6&BO:Pl%M2!l\h;ppQQOF!-&18]X0Wnh;A<&!a5!&''iXbeP&';b8Ti1Z7m2\HNFc\c"M0p#<e^FV7%9iY]$.h?nAP_1OOjf`.nKGLdpA];u%Q@BbrS,5(dh2Ys*.OEl!b0E.G#K>t>j?;*Wbg4d>72-:O$t*Oa=@L1b^Y[.C\'RScCsb<MF]W[NUokt;,q5fPeK0@_9B,C2:k4YN%Rm$RT53'E%Hr0U[#*UfD_H7_s^9_(DLPU5BHS"lcmmAp+Ml\*O8Xe.7n"i930gKKuHU)To<*bd;]jCFcIJqPrEhDgDDqO73!fcl-%*3A<jaRp9R5Ga]ak=);h.3a6f^u]GSK"*[*eLg"Y4/=XTQYINihF5Y;Jn^"I-)P#3M8.=8r+%;=]+ta#BqUEar)@E\c?s<BVWl%t%LTa8_R[@3<Cjm(+n&d<*]6d@nT?ppO`M)-qmZd$0hRF0ZV9,-`K=l1WJ/M,BpPiJbam?]J*P3O8&E"&Y_G0,36H3M+#(Iki2r:u'%&[1(s(#OLmGtmm@^&4'-"Y'!4;WO"/(]D).eaNE1mO4Zfc6r-Mibm>rc!&:goNqI<0:"S9X.9-X[mSGHbpRT*WqR,!kmS+*\J?*.%Z7Mlfnq'LmeTBnYdEb=j`"b?e@A>G9fop.kGu'D!WHd\&@T;U`)s!r&E@rMdQ#a0Z;2X>[CV>X(HLTn^kO+4KY9FfM<br2lX&f`J%8RFXo+gDAGTYe*tYEFgef%?R1Zq--\3qY.a*R9)rE$l\3GL'A.OGsN./($`TMtKC60mM"+,!q?LKaDt0b@:M@m>,ja.CLkVFEXGT%Gd\R0,DGm*j09s+G[gSj1aWF'qH1f`?/u]_obWC=q.^)96<A*?0i5`Rd<ThkSB5uY+(94(5Qh$k,%g<@S89bIMEXoi?g5_"6@O.X%#>+#nM%"suiP.-G&Xdr(>nOh[Nbmra.1;?sn#q0^4_ubsn#;*=3dT,,[iHs%kjH[dAR_8<ht]Ve`.WM>?JkSQ+p-Z=dF4S,7(R@_%ID\!=,3O0.4E:_M_ogs*=W9L!N-#l8W8%*V_\9#>3<CAUXj-,"AVR)mch0rRiVssl>G#7gLMrSu3rE&T77Vm=$8\B^B/^#:Etg_q%d<TtslqjcCN1SWc1Qd&?P!iXDp][S#nCB;h/lQKS"e/F%12!/JIs-7.Xet6KAEEG<aA$$9%jg3%Kdj`TcZe/Im]=SULLDAnM&b@H%$3BTIJldjL%@7JO(oa?l&B.Zge`MI&1;?1Ar"i$Tg*FRt0q0Q$`C'E13]q##a"2sMQb+!hRJA;s41Xupb)TsoE',em@5'N6QD;RZ%P99G'4@2h.(Y(e.K_MOV)h"C@`()A,nIa7SqJgV:]FYNS)/+Co/N`WVSiYZDS95285TB&ooH9[tb!9f=)=6/?^BteXNIAFnY31s3%d-1'7__L!u?(_F-%p=]5jEb+tNKrJj*fC4fj+koL1RBm!qT4s4?g_KuGUKNp[N*B"/ipfr>lqe>[,W@WL<HD:DrbF`l=$?A(HWr9%S3A/mILfdl"'En7X9N%,B3,6Y!ZIW4YgUQ@B*^=PWZNd&TJ@l.Y\i@Zf_JnTPj?=:Y'<>NkWJS\0`kNE'Uug#:\DbSHJkC,'$#SF%:gs1A3^)p&f69BN%$rGTA=s3cH<-)q&&O/ed-1'__nB,hF[pbnbtjkIcpL_B..Z-8roLQ(=Q>/h^7VMHN78FPk-N&>!;3LVpP/:2%-aJa_">hj>3ONA!-1]A+d-#p`"#Sl9%3Gl&dbBj^NV"O?e6Yd&4eO^rr1NUB:CIbPiY\a4k`o3d(]qql>D8RJcrUb,9_3<6'R3;=%i+h2Pg>i,>?(fHnq2$9AlaP#J?4SGtroe-KH#PnmFU<Fl4'X]@SR,21kX1?#)?RT*LWUhMeE56uCR'147C!+_Oer)&r64C,I6?tC%ome6W$t*;Agu?_3^i**4]mf.l#C9\Es#_#l]t-Jd(Vq%!'^X$.=N:m.nWOP]NbR>IT'?E[B0F+IDI1ZiKhOX[/c>h3"p@\%*08]F%N<!f;/BV_$3>\!BY>G;b>7m>#iJH`-3Gp">llD])g9H*QDi[;Z_j"54Bo\U^lPKgEG%KGD2:/!Mmp@+;d!uN=5nOi"/a.F@N,o8<%G.s[Xhkhh(o\<aCCWPh_EHN&uqS#L-WlXM:pRP://eJd#2RKIkn(Bt#G5QuCE_@u\@;tWHJYm@;lB,-8o?QAp$oE!R?`RV.!/6C)%n9#f<]J]a<ZU3U9eFCB(ioU:C%BjGX+kN.;qj`dIrO_kNd`Ki0[C8fbqocG.Pdu&1/I_'Y12M<o37PQuAq9J7SGAp(gssk-Pn"/6%\0DdWYHZ8;ja0HkRGQbVOJooq@[apWlrOs\,b''NkWaK8m)[a"9/d'!(FRakbJUmih(&#6F4P`Qf[A],]QKdi/6rI(X'^j.iZXtA%2gPA=;G.r%lVO\&*(b2h=M5Y<^2LcP1'Vquh%,4ga/nF+7'TqPqfj@pnchlkr2i<`mS3`L<K?r:o0b_;GHYqI7K/^a8j7n):I!m\%4;9]`48tcTL3uo!mdkcMIbP?oB6>WrmX:A1HhHXSmfV*q3d9=SiNiW9Jhs,<s)cL;%dL_+dpL>r\*N5:5khGQnYZ'=G$L[*h%bUL%er@olakjP`E'LjY5FfKehrMgsG=;fE\^l#nG]smFmk-iRDQiZ]nVQ_;:^l/Eo6@U&hR<?(B')+E8J0hg/#c4BEqG!l(K:-G'Vs),%Tbj.H,7B:9HGV`@`S3n<s5=(!Q*&o6_u8k'_RB`fT*7`Xg-WO#dkF'/bFD:^#b,EA_il7!Y*'G7$:g_S37u&EdatH$p+S<_lZeMH%G>LWb:.VKGKnHVqX:Z"rSYN14"D82hT`-Ub,hV?$h%#]n?O8XUGr#YN^jQ=oJMLIo?8hj&5=AAs,]_=r_5`#LJ!^3f4(?2pb@TX8%!XcQmP[K]?_r(7[N<1\me-(5%!f]+!PiTO"hC='LNfO]^TEr]^kl+`iX!'09gIr]&o_I/WkQ0:J<)T\"MdltoTI?6sYsZP;B\O(H%GiN?^D)bS_OVe-'J)oIB]RC_HnLi=$]f=Te.dKU="pU.'M%amBlre()5NF]-Dp\'JIcdl]:0=rZ:5--,0h^6koC?-2]'*kCgR"PX%Y6jruD[#Y1/hg]^AL30df5D7\YPdD#3MT.&i;=/)Pu7R`;P"fI83OOj$R4HpgH7eZ4jD4+]fU)^#_C<W^A4K:4q8k=?;6k]bk<0,%?AkmDs2.-t#jFZVH^RRLWVA`I;>.K<7$aQej7ns!&Vhmu/eH1LA^'DW+2A;b5XWJk/rcOfbB+pC"T]?[0Ae_8cXX1a9.u$Tji&(9%\HXJl9!J$O`ufu+,[Z1NO]_iF7^8=>='MgT3rZWh`oK2@4(kTO^%'dGaq<Wop/=h,#3GZ=S3Pe7Xd_QTQ,kTi%fq`nNY#WGi\`*L%p%^*s-YP%M&^-uV#@hAT3A%JI9J#>Lp%r9bZXge5.&Q(,.GI%,<ApSa&`#f0-gsb)cJ4rX2D\fV<6qn#U/a@Q\&(fF5T7=>p"5dM%BB,c*QJUe9WJcQr!R'#'d4*P0b0jLB@>YTHm=+hT<@2!QBNKck\uM[:NMY'534-cS8[Z"Sd*u*TOS\?`4fOL!$lL5*nEnf?4=VY<%WCGu0`hUs`UX/q-g.\RcOF`-8]bQ/L%3p_'MU*0S&Nj+klH3h`Pi$pE=epH9G(fZ`]3gMuoSpdGIK_+r9KF[,?S-Ash\D;8<=Uq9%#u@sLf06/3>*(geWPb7]k+kHNF6P@RabMiWlpRHt3fsNXkladR4e_?gC-eB.f&;V^_%gb,)kl`"mnA?Mk2c0<!G:<JE;h/+WBWq'%hQ>glBr=A,QBW76B::88:YuPW]%3nH.>'k9E,c):Bq<SKil,5,X]6*Jal_AtIYZ&,k2)<9lm(RQ%Wc*qpd/an8fa;O8f8]Y/ffQ<%I;":3<g8$51MH"#M+Y4aFIE"'WYo()dTN2,5r)FPb/q8;eoS5lk'5RL<]aM%GF7?c=qerI)=dXeK9X'\4]"hSBm6A?>,,q.0ep!\%10Q[;oGg[4Xq_M5dcTDkN%<3F"$VXe)U4spB_D%#^LHD5gRKc([_AqAd73+W87fOKIUD6<)[+;o20X0i(["P]2I[rG3H_EYI>BeU%Dn/3*EaroCNF4H+bZn0U7e1"sR`n)\%3i_hdR@`<(9iCHf!jFl-L8UA,!odMj@OW=9iV+k(#:Df-VKn+MHdKDj>2c3a`!HDD0L!)%)$#;b`W]N(/T7:G$j6]e@0_N8fpj!)[A<qdGYB9$58SZE!,-c#S&Y>[j#^&o>a^f2As);rL$U<lb%IY8H"F-3r'(-mpVTs$+J0D5%#%Cr`F.GcTq9K69`?%-Gi(r,()([DAMR[*I,=Y6iXOn$$ROM7VkLi0Hi1S-CbGBokH[U)%;CgZp)%s8\!qMP9bcrnphcDQYOeX`Y%$J#C"(/hH)ZN!Z[H1Nj!lG@Bq]`FR/h[!MjR,opJ)rjSGT+<#\:4o'ieH&r./`c,3CU/&EUXX53.U`b-Jt]Q)9l_@Gq&2XAUO8&i%P8/CBQ"a(,d]bTs;7k7VXXgM#^<LB.R24s.I<2nEmAN6=n1e75>3?3mBK)ulc!Wp[Meuu1dl2W8Q`AU@DSbN#)[F)Megn5S7Rtbm%SIl53ZC,c[<Fb[0;?4$QJtfMogC_Ff=_M"sFU#Q2:a`N9*KkeQifC'5S]C+rn)$C*H>8nlS[m7L3>j:)S_#53q&[nAH"C"*C;($9%$X&T._IMa(<p5Lq<@8Te*m60[jAe<X-72Nn`j`Z(FWe3q2Y*:rmUp/=`4`ftF7os3]Lb=,g-%m;YLAncKlA7]W`gL_(:cHQL6QXo%?RlP0*Eclk[SFI8Y""=5`bTrk:;kVP78bVj:Rb995*n*p=%B%ADm%KH1*fCKp7Tgq6g\WrFUqfV1ZLnGC+Cm=+@0Z!h*%S9$5&^3%]?:,dSjqI$p?srlBR72sgs>C,m=%98YIL3jiR1kpi>;53bW[r&bZ8",@4."B"KbigeFufchblk]K`^1k=0nmLlGa&:H`iq]$j150%9CcaWoouPBJ_s/GU<YYoZ<6f0ea2mDoA'p\@K(<G7W$GA*>I.Hi3T:hf(Pk]j>OjZNJ7)4o+hVeMlnG;](3SD+(NDIFNJZ,'6%S'%B)TqiTjQ#LW3,%=0)iPA8`,!%/_hr;K*Z7P!L*0.H>A<tZP#G?g-SeMJNDOGk>FQ$`#nAa`?$s6C$Ag+a'JUi<A1'ugrYF:lM:1#%^"AijqlsZ@c#"WS0^XLnn1N9g@gc^<\6l[u,*\A+03`9`K$cgIfg=@m.Q:/FgFs%a!JK'[@5t82-'h0pN!0=lCHP2sShAR8W&%'J%Bu/7e?,bB+'hibPRUQr.eX7]:dP)kkZ7+mJX/AK&+?qb+4rS,1p"S`<.-V*giFE>UV(kY0*OGBSBU0(uabGPL1H,Wg%!Jcka8=3:%^%=diZliU%'$icOc!r!!>M]^cX'_uC;9[3QX#JDY_D2e.V3mNqZI-gFH7"3,<SMFd4#:h1$GhhGk$,b9YX;FOM3%n:bgO?T_Bi>q%0aAsc$tN;H%Qrjb=kpJV$&AQXV[8W.2+Jc,B^&ODfpqr=TeimF>H&InZA-Z;JrW7&]@YDt=4!@8$Z8j0B3mm%Xqog,L<dG`cK<nX%%@qbJSYfS0lP_hU$9FYt5;dQF'm+\E`u]!ZbhM+AV`iPVR9.`aZZ*P+d$[t^M>l0()ERPGAE+$'R@^m)\d.*%&h*Xh&P>N\hSuh)%DWCFna).MV9&]I1\?iV`]Oj[4oh7$5;e)$)jMkt_%@?T[Z]41U>%P%Oe')U4(sHV9M5">:1[3,uoD#Np]=r=2qY5[.jM`n%22aK\%;)5;%>a#@J6#!`;%^MiK(<p"22:$`*=KD/hCfWg/_,_*kqaR&@5"b]TRj38MFc2)7)k*bl0($5Q>O86D$+X2JOP6%,1WHfS9n1hc%)^VU<G2$a^Lg"",_O.Fj.RV[m@0gs$<AP2u^L:d?/QaE5/c4$J2Ol*@f;X/)W3b1_:Zbk$'LAosoa\m)$0;SR9K+FU($kXrQ8#J&%m5_kfCkY*N9qAC^*;W^b,e^Ki!RZ'@<l:_Q@D?+`(uD<$=9nQ20R"m&WT,daFb/Y&G.k3?%V+Ul.lh<T>ags]S6m2-AE$5IA`+.u%`d?X?WO"F2WM=T_i&@UpS!^s+i,F<0^9ogQ`lt*Ui>"Fi:A2S.o#c`-A]c?jWNF=''RO$t[;85cj/%is#:XDpD(2>Wr$I)^ND>DU%>iUl^)*mgECC:tJ;)c^'RafMp[=qH_ZGJ>tI(Wt2`u=2KS0(l>@Vf(s]p7*M8[)jsNehZRq;?La/t`VG2el2ZYOY@+cpV"d\)e%#%Y)F4<4N8[blXbQ/3K0:A2/I2%%)mQ.erdkoF/bPAnjIfYM)@LQr''QPeUHSu\uJk10k=JR6S!R3S"qW:67(nGR23m.BH?,j.(pMN%ar`u!3N]/1,_+%":(+O2EA]DUF4o+eAX-$E<?*k(cjDj-/?l94c4D9r4Yi8.D3U/;5q0+-'f2npZ^-_V[l`D4;4Iqbg37b2Z^5`-%7OE/?R]VG2XCPkeg$6EA]@8GbA7VJn^,9?:pi;^[N;BUV[d)RpBK@"KH$>&:1:5:^1-3s;WS_PO#V5(QV':&oqRfNX1'W#Q+O%Ef%p(iR-&8gEm38*"<M<o8Zcoca:=MJe0MR,FGm\;-!r15e'0jl<S+Bc5>IZca:BR2aQeJ?h1);:Kko1a6Dq_G3Ug:FMsHq^kh_5LOV%?!Z8uHPpsMW)g%gf/'V2PAQh(V==<j,.P/.pa&p4::@T2%m`C$Bst.=CMr_a=iA\?f"U$_+8'S`5KoS'ps/POgUr#Po6NCp?-rJO%LYHNuWo\Q:2*4e3<"Fb,o$.lXXr^@4NM)%'"1PCfe*_sbbCBDkLXUP;.!2o\H8l:N$.qU.S75fh>Pe%u&#U)!)(b)=-=tp83_d:)%B?ic.pI&b&0l62\>1jS"Z:eXgftZFX]H3<!`LW*+q_?hCCjC^NqU#GlRp[K:A%8.:C[=VGX)YKF*r,CHmG9ZCVVU\lb.ahll7D$_%$(H2`N_0SRdsq!?^%P>9<F=C%GN`aR&&scBTZ7J[Yk7Y%76.?e)b9PWK,?eup@:+LglIj?>)Q^,5<F[pZ54d>421$8oOGP*Y5^C3%_emuORJIXSle[AnltYX!NA*\k-AMcVf"0:A!O\XGol2&gWGfOuX@PdNmB7`,m<9'UWU)oe*u1dBK.F]^0@hUN;*R/,9gua_V72>`%`C;e6g9`'SqJ2ah+gM$\4tIg'02:8EP7bH)-ggW2Lgf#NAg4><[DYs&6Tqm0;E40df'_a!%s!S+32:cPD^jI:GtZ>WE1=h3gQo]j%hEfX(r[jsc\lja#QbjX%a"55CaF7;i"e,05RhS&c2b7cY7X2%"p:RjNW^4H=9cok>HdG(\)*1^2LjTFLVDD;gA9bH""a)\K+W.Ml%KO_<1!NQ&uEcao%(5eS=-s>U:7<VYN4GXlJ)ff\`/j!"`%j-n$pj2m2'OSA*Ai@$;f1Np#=mPFW3+QmO69]Me=?PXtS&KGUoBpGk%l&2<TjT]Ja.WA1%>VGHd*#+6*Lss%pI.DnbZ.nr^Z5*fTG48*J/Ts4'G]"qY=/ln;9Y0`iCfKcpA6<sY-hFSi'mB@SD$-I$6TA'B%h5JtC9nhCS@LNs2eM[O;LMHRCC9]nd$9Lte>9ana!*,A9iM37rT\<j63$<9Q<+-U9QrM]YE:';A:kl$B2@P,QH$mp$Fn*qZfWA^c%luj(%#$S`$I$&u_SB'fo&$FVU5]9B<HX2%R"H)hRWH?IcBD%(nY^h09:U=8OcU*rO71,!N*K_.T9BO]mc<9AYQ_#g%ZKXbeIZA.`%;)q6hknqp%fq/)K>Aghi/0\lRUL#/p>1hbDXgI7bo2^iV%fJ/4Q2&Ln.q>@^C\Es\n+2X8f=d_#Vg"/kmQ4El3_=5,/DSB@caL!2%SD'LWReMW=p[spq,.D/khjt=?1E<%'\Si8XlE3Qim9'OWM/H`PV<V?$gRfR#?!aDohNtFTh::3[FR(]qRoe'URto[uRSGLGOL&p'%Wi"7GV:0oYbV%FfH9"83H.fHk:9Tt$LW[XHQE^mCg2C7kV]gu,[X(a"FF%5pI7))qeT?+']et_\8N!'q3fV!Wm\uXMYEhqi19u[M%3k[Y6qRpkFW2A%e[EHt`^8gEkhK-*FC-'%33q_@WI8n\[)/VM5H`a0o6V7/ej5$d#o]FK^grMXd:ediHJ%E7cG,hEDm:u$V_HU!g%)>f`sXJXa.@Tup_X`am:;VQCQh6n$PXI;m;_QrRBRSL$g>[+nnC-'$<CjW@_dp"D,f`T!124\&*SMkfM]p_^"Hq_4/ZB&`]]imJ!%IG)<&:6-6le$A[F9kU/_CCes;HF7iAkOIp\!1pf\!Y,2fkDT#b\/5th`#K],l^Z4.XmjH<[NOGG^<`k/6cmiif]p+1;t%RAS^sBK%X("t`9%l>r$O_uK2&7Smj8oM&Wb6aU<`-/u$7q`#[h1jhTgX'J>Zdr&[n8$]N>,tC`e7+"<U!L`EiC9-S[IYNV:m3YCpQ%AbUKW\%nNh@<e?%mVF/OK5Pr4nUo4.3I29_nNojOoAgmM,^=Y$;SoM0AsrQ4%bG<6;uEeu3QCN58dA+$F/'JDC0m`.#VBQDIjQ!1#9feI]X%p2-"A^kQ!caSEO<:iFPs^#s-2h-6GhH2>NYna$$'8n_mPpWg0/Z`9k8(l1DQ]qbFXFDHme=O3U>EBjIE$L-.0rO#e.0JqY)@C7Qo%#SZ+=-F0X[l;,UF<_h;a3c_X"W%g1eFSbH\10X-tEjag@#:aD26T+VI)lgHph,$h(]:melCi536$K%;p8'fIR+h/?+f7D\HS+X+Y%a\tW"\=[%Q&GMpHh+![HlZ[O2cINf_R[h0r/Zb4D;65kLhXR#EQ+$Zm5j5;RfZ:rdpA(DgYbdoL$JT,_arfK@+f0na?;6pqnCB_U%*Rs;Ap5l./Ogs?klMHQGGE\6]p3)$2fZLm-Cd(N%$Q1jbrV=gg5ssrg+&BP]\eBeJ[hNbg>)iF4XIdo!*35?+'Q6&_m5^"B*lOfc%&G&5C%9Iejp[YI$1:Veb<i/t5_jsQ4PNsalca__%$s-36g]$!n9hr2Sn]():GPe=d/Gf'^;Vi>^Z$]I+?L!]4cFDVR<4]:,?E$T'%EmWme-etgan(#1A_chQ,S^k3<_^:Y^'R#>f22n;3l\2b6K@ZJp=I]!#g@dg&2e?A?#ZXkgm\-lYm8pL&IFIpqOa]45B'HuR!qimT%_HQ/WDKIXp`Racnr*DAEef)Lh+UuV^*]L*;f9,9bH<'Ud'@7?/Vk*E_MK@[6?S%sm""Y-@[004*V7'iKbEu<[_Q8IYMKpobgn/cH%N2;WY-VJ/g.n*,`5ngkK+'1e&Vput<ktL&9`J#`:@'#_SEXYN.C=$]5P9n8R&.E4l6\&&?Y-B8g*Q)MW`t7^OfX/XUs7C1'V?Yk#%err&")chWo$&bmffFWpScY2)hJIGiK-7?:m@93)?XBf'b4^2n"iuU:'D"9,W4g3INc_bWJdSrB!e[WcMbCmB+5S"nf1ZJjpE6^L9%M;I'6in<HF^2VDB`KuaLbuNbIQ\Bgk>:AQ"<S5=ES5I2a*3%=!ZV-a.f^<CI=1ro>RhL\.?;1p@]1FrGXJDkOo::!h7R_R,Dm/c^%0idLLFhsA`mGIhll\,au1>H177LuHB8^:aC<f(OAI[V9u(J$!*WiO'kH.k2Yj=[eEh*msMCF9=oIg9l/dPPD.am'Z#+c9\0T:UuV%B?k56n2.'/WCQf"<r"ZaX)bGug:un.SKZA?)ZSVL!m9g0V<>Q=YA^!@$-\X:?crX=P82X,Kj(-.(oY:q+(EV3&]!;B,0]]%m-D,B%0l/6*[AL1cC6j1)H5`TMBI7M7*N,).0"2h&SGcue-dM![40rdf54WkWbpd8F;lff9b\Zld;8'+D[ZDXe/kPoIM@un=0L9HKXY<4u%9q]Q#['f2,BXk<>SV+>38SYcB>L4opS_hI>YJnbp<gaYPC#;%`I9#"4*LbtO=A/QKeM-0pH[CX>CtW'KP+"7NjM`n%Xma]Tq.-g0%5iXusL@SfZ:Ff*-=kt$t<`d-%b2W*#?ZBDLIO1=<FnJV;\pS4TK>m;=gWNg]8hg-hW^ch5m9u7b%IJ$,r7FMR&+=@'F0;u_^#==?%\'-C=pPtR5nIf$(!OQ#`[PhlOcAZs]=il_=2N;gq;f1'$qk.ObAuciI'41)W7^eBg[[7Kc%/7u.eH@DCf;XRKAc/ha]p'P7R+\`"%prsAM%0YecDdC`d,DM>*YA@Yf2_-.H0%QY_@_%Te6i3GWH$2-LZ!->'WNrcCV:GDYf,8N%Sc]AW\.YX'I7cSc!ikq,DCMLG4]fY"%J32#JWm8J(p(5jq1HYdtG(6F865K&g=4`m_[eB4J9dmIDHlq[,%.BBhOaU+YC=q33\aZVC.*Kdl<Ie+c!4=o"[jVfo&:2d6C)D)u%[d;XE%3Wmop/QXsq(o#O<:!H;U'f8[L1=e#Cs+:n%BC=8R&g*lNFljj'D2XM[]KU19o2FNi(Auo+ZX^+;,7cKDc$[ON065'U04ZF%poKEHj#q7,.,RKAZ>G"<TDGprJ(LBAH<Gt#+3M(l7(.L`b"#oOf7)poGUOY?8_iY8]IaWTe'#Vqs%ko.o9&cj.%f&].sEt;:R+o[%Uh\:9"/P5VQ:cc=:A*A^]:n.f^V*TemHr_+]:J8c*h'OABoCfU]'&pXB8(GBXL:1A:W&Hd;uO.Q2jF#@5P(t<@3iSG\UF`=,bF:6%oPUU%ch4W_aZH-\B>-/iOh'31>X&U]>^JH^O&U-;V/ms[ZK&KEk!N?9^N-r-rQJ(1gZenQSTFbR#Gf+%Fn9\QFJm7YXl`iXlY!rl%bhudRC?enQ5;FcR;L!UOSa0p+kjU(J*mXF75Lj\i2c(B`lXq:()XN(4pfp%s>uU<nIQO1B[tgDrlf\,4pO[%-&*NeW0;p:BFRO=S%T6]Cs:.=GKkPFErW6eKA1oE-GIBMJm2E9ftIWV41f&\@?\UN\`bbhXNgRd`/]1sT]&0sm%rEMSY%G0m&eEtTT;q5fgSEdTSSuXHh%oeRs<4csU5F8\dDm2e64+6WKgY7>Ji*o@HGnPGju[sQq`ri(@9=**StlY!q"CqSMGZZH)h4aBrs^AGHik,8(CV^cQ>rX>9;5Nhm2%Y;^6@&SufsTD>I84.O@#_'TVtoD!KXR>uBhhd4Ug>8p4>G^I?n\UL"f`M_*;]:J8s;J`$fePE1^g@8E4M7n",p"Q>nD0%YVON07A%f?_[cH2C&#ra*nCgIL)cqK)V:e\1BsY+O4%`O!t$44eDW4]a]-qJBRJ0:hC+3ZhM8WjHcjPM)pa->tp!kZg=S4XR`@.opK0F8a<A%3j%J-[QN0fW&u]DNagRTT$hLl;RuD0I[e<AgRd`/;Ht`MqX(S8:jK493Ch^Q-@+46lY#W&8h5`[T'L#q&1^uGh9P[L5LiQM+5?'c%5;O[Cpb;S)f?^H-ZeN$>lC$.nl=X:+]>;%,k/Lh('rU/7rQL7RkUF>GAT5UNe=n9<'>(K[j$WEEWQ7qO(a=-1OkRdTR"jU:^@>N8%[]%S`;?*bEp#]@&p?o1@jb4GUF<CiA';-XJ8S,23]7UA=_AquFcdEC2\ZUOH>3^o%Wm(\j4O6%#IGlLeE2J[@O&rSk/FK!W?\G<"%[]@7m;r7,tUR))'`PUZVEOVWokDslaW;1[?F:K\CRZ%3;"`2J/ZhE-G%"#C2G5-@]?0.QTeFd&-pS#^SWaF$>S&+=&*4f<;[)sG6%X&\Y7I\(%6ol7lnnhp$PA/Bj(l#mA"jN)<pjej7LF7an?H)Yp.Hn!s<47deUY(>q$-Ug<\:H'9Mp[XRoS?J!$-f&I%iL'3F_qdIr%9_iXRc'7PGhh!OA%g^AIN,.kP?[#o9%^FG;o3:dV-*LZa8fYA-N@@"9>/Iq%GmI;NkB.N&3%qeU1c&JQ?as@#43O1;jWbni3J+F3%n#\dY7VoI-I=HqJA0F$k?TT=4X$45%P*%@]K1Fd.k>UChGr!N()pRrMla(kV(/5fV`I1X(.%7$B;BSgur]tAZj5pU%7DL&Th@V,&%!Tu$i/Tj?2:BdTiHoactga]fI@_O]Q%o'Jr8iiIi>W0M[dr;\dR/_TUL)/WTXqL3SIAtjNLVB$Gfro`LO3;E^h4)_/D3qHbObWJR%^(M#n]W.,D5J#gCgK4#/Q^k[.EP[r)d\f!9@F,Lh0KG=pGPIY:6;PKa\5hehR8Ec>!&jf^G!lJkBk/pDVSgLNrBV!=96L-*$O9$m%-l2L6T86t0.JfJ+iLfnI9t.n$65K=U69Xmgr%2r2HMYak4KhcIlQb01T%"_]_Rlg9eB^fPV&Nb&NInJ]h12'6MHfgk:V%9?hWUS[%8N.L*NPNr\2na4u_'<O7[=bo0c%d7mS>:H+,M89!"Vgp"B5%RQKg_+9]4R^DC!9W;[4qLePJ0+#:9!\$+)0/kZ1+'>Rt/Ai*$Jp6%_tbuF6.2\N00h`\%"<%UgTAuq:U/[Bb:ALg'INIrq*J0-@0GE"oAdGk:HU4kjXs)t0V5$b'-9$%-%F)/OZd+oNg)(db:uSAWJOq=%;((WeV!6C;T5GN8[qt8IId4O0&`T5Uk]JNJhK+l_/0FSu1`[bf5JMqoj(WA%X$/^rb)@,0/:0`VKL`d>Fl?fk%",o^_WTn;b6:NA%T\-Ben2J;-`R0*9]XiLh^g\B<H.oA8)[Ma(;)N\YF".lS,bKAi!,CAQ$IDiSdC2BLR]b/EYZJ]Vogbf5q5<4\Dcu'tLWs2`C@StF%,KtIT8\E42O_PM=N@B]aOP'HOW:E_+F!`_+#_iNgNFQLq`s[WA#Nm:.@mLoGnf5F_$S:iCXA)jW=Yu]YlFGpKPocMH2CFUd%6a:_%@Sss'*4)kX,D\-2+@qU$We:f/P84!Nk(8h/4Jk'!NlWb,^K<YOS-fFNjT+P"R>>l1Mfk"`<'hHT.'^`QCq:VK7gB]fp!3t=na^eE%TI+e^C@XYg?R4K@6KL!V*?ii:^lh:pFPXlfh5eN%M/C@5nr\>m1/HhlP^R2h;GX[JB3gc]K<<+,Pls1YEO]u>M9=Ba?\:-3/)%h;%;n\J">qA's?Y%<C9B+PC^P"6T[L6G`S3=b?H>aVXgt\rfb/*%n4u\]H`29&>[k5<4\TjCOBWCCC@q=0'\\nXK#?TP6c6pCY\IjJd%);n;OGcgr1'sA&WHn^%)`6#f00O$[TjekI\o$a[VftH'/D]9X<n-&kq$<E3;7]$j6&!afhTK$l,m#/jR+5ll5Ljm\6rYc>2J/ci"%C3qn1(NSI*21<)&T2E.p\:,.5&q,5FV_F#mQ26GL>4G&dP`>H[hIGN.bHN8)-*.j%8s:[F0<rd2pJm#kjE%G'kb[GV4kp3`pu'C-%eCVV$A>]oKMPt-Zls\D[)Zpg&JdiVn"F2<jl@?r4co4gh9n\EE#Y_f8pMX$O:J3LsX^;rh!-K&q)6Y2!<cGk;%@Z:,`aXgZEb`'%%#1hVY]0!G>"qKg<3dB9G5!=VQPS%n.,KabJPXj&=q061k5E+`1,,h=UNg9fLAiZ_dCj'@BJ"ETC&r0P;mu,]`>uGVFGe\2g$s09X%Z&*Wb%f8ZK>[U>QDk(UNW'+oi\Pi2PM2aQ:?Me,T*e$Ng&$.TM/Qq<LrX$bYDXlHl&).XF`1_l".j)4s'q]^om03_r$&Cf];6c%_%qt,K/r!PtPQmhN4UdR$q$'0H9O+?(H6VnK+g.-iQHE.TR=Ps&"rAhQ2&X%'#N_]F2H:)2$_50Fu(geNE`J5(L\_rgD.j:64JtUN)%8-Idg>iJ&hj(F3dgp6]&$>^^GB-Z`-3bVq\#A1`e@4/pMGa6TbXT[mL,Yf'3:_5L`LOeF`#f,m@qK\.6oodE'2-qMj2i`]DG^9X>%I0`(L=iKQ-5XDYN$KVpqI/G9e%(/lle,>-hSi\MmIh\:[P//\6h5i/GKki,jf;,)("iZ`GpHuhuglLVRH':jd\ZC_(.phkn*$SlW%5I$GOn&!4L/F47^%]N+XN_4q?.p8iMa-!'&oDgrH+d'`*:CQ!W?$O^T'\Et([IY!UUb9N/?97HZrf5fLH#gj-QUG5JA+;kGrtB*^%+'`9kp!G*WU_%GI+mo?*rAKGC+f,Dof($^]2fX*$*-h*3i?](Sqk+fA,q&*ZV37#Oi"lfQ>TkKHrudD#nVr4#)3C6!Wnn:20+"@t%pe?^,U^suOqH_u%n8ph9YVrn>I1B8Lj9[!/41LYdJKs#)aI8o5OL-aI:A(,F_3r5/V=6LhociQ0ZTOM>Zj/^D.q!o2U/$jS6YuST%SO=s/?Pg%/\c9h)'$4+kSrC!l0UYVRm@i:rL_o?nTKegrrO*AD.!NM5pQOHu'6sM:s4<u)m4QHWA789g6b-gfiZ]6jo%e#@\)RhR%fOmN[:9V`HU:VC"9$<cUcH[6@;WV?KnFiqhr*l6R$83@qTUn^9$rV8X2Q+HZ)4ilOf.SS.s*K96I=;>?^1Fn?n6\<n*<G:P%-h"T%nVphL83Rn_`a@`cQd`_t2bcD(R%@%uQT=Bmr3P_4Cc+)r,V,dR6#QN3I4,D?0+<;^)U<M7`a;Hdel%6*82;=V4,7Vp)Ssa`_uK4'%!otkl5gnP1GjfZmLHiut*.C\lkjZ'-<COMb/lD^ckgX8HL0nJT=D25&Wlf^rO2c)`OER0Xa(WiP_Wiiunu<s#U3KZ`=ff.'$`%0A%#TG+oBR&/357ST?p@3i'0M(1lqHuj'm5H>\Atj0sFm?NnBmM#k<L=oMG0q73^X>/s?0AU(]qp_uQQK@VUSb8H)C`MB6OC;nor5$V%!d9uqc//aMi&ssej]Y4):ZXV>b/G`sN:MB6>7dX*C_V9LaG>_ZE=n9W\KquU7P..^OmD??3U_r3#3$mDIIuI\'Bp:SbCoX$@F%ft%6aK5uGU@i2S,-A#MGQ"QTC<qoYJPLRX63!p_k_l1n^Kl<P]Wd.$^J'lcaP(2rbTmIHb<u*;L*bX0')G]:Hf0DM<ZX9Q^^)M;jMq+%INVB4M4j:c5g"gM,kh(6c>TWC='."_X?3mW@]W1?71]4F5'S1S%$A2Z9`huH,l\LV5X+*DZ-qljFsTMhqM:_/F%aJ9D*dNn0SA_m%`SNJaS"ahP.Yp(Qn;X/"d!-(omqN@$n"Ba/F@,)CL5niK=Hp4oM9(d$hFmHHd^\e2i1)Lj(aJ0r+%pI6`^RUS:mCRknJL?BYEncV%\/9J`+ldh0V[`g=T6O'F>qH1fC%t7THM$uu(`1W(7mZRBdW;,M$e>^tmK>C>!UljG6p\j`mhMVAqJ/96Ju\o,FnCgSV0#U+@2r-@%0d=.P9sU.`Jb"mW%c[$;>Z''">#:Y-=uYssf=A3M8m],-X_`QCJQtfJ0D2&IQ@hNl5YA[OXQ499F-!U/s.H1P!-U=CSX1$^-?n`8%U.I*\*+[@<1s%TIC9gh1"-.HF*AICW/>VOGk'VJijJ4C4DT,Kq2GAck@>7Bm-\9A/aX`;1Y3:WT,$F-Jf-&T\,hLo9XU$gSPgNYB%ATgcXh6r9>%Itn"LlFrfPfs,?/6^W=9N+W9MjYZN][*p6K#p@94"@r.dcN['*JZin$^ce[K1WlGZ^1@%YH><?i!>gJ#95M(PU3@)%o\/^(Cik)Mqj^'qE$@-fJD\AB2\G%]I4:`\8\6qib?_V>8%3D+*@Q_YF.-TIe:iAs*72@"FqNAL(dST[`HS(p1(;012U91>G(*qY%Bc,69Pc3+*-m>ddDjB5$ib+6tZnt='=9_4h>^StY[@hg6I`SQTC(`O@BO5\:f*dZHcH_7Mn`J\K^AkfcqgV[bpT\a3*<s2'<msKA%g`NVtD;F6@oicXKf&lo)Xk1^r[BO\P[pC#V-+!\,EIC^F:\#O&[iC]!04g((9Pf=!%/kR.Ue]FaKGNtu[em1\jO_!4&g_'sI:<s-%Ht(16ME0>P.1sY*/*hErV5]!YR>)dg%ACVe,"U9J#QD)+g_U_d3[nA"D)FbUbB9'sRD]WGEA-$e:!+6lOI7mH7C_V!?/U'qN(#7J%+hC!DA#0#7X-B=UDk&).OM#h7nTfpoP;=Z:s2rth:jdZ,ZE;QNVb@EMS5+1&aY/r9BFnt@q>Oc"C]D?]2V(Y&A'f_pR7Q#aE7,ef%`R'Y_>ci-bmS\h4n93AmY>&iY<[]=HMM(>+0V,S)^[,[EoQ4*F^F7gbG1*gQg7HsQ#TKXp>,,:Ca@!?HL+O?Sc_:B2r^7iN)[7<V%U&W%(ToBX]6+?k\5;(?M+*?aCHdmLUIsktr4a?PK(6&PD9T$5*=XFt[0Oai\E@DZ^r-ut>ac7Z/P2-qm5K'E!WIYO=B6#ME2Zu[u%e.Ps>LT;4;!M3<VW_sZ*pTeka8>Crek0'SZRICl[Bsa;@27N>O/a&1iQLPAd`Uhs;q=Y?FZfL=Cq\UP8/RDYEXrThnZ@(h>.3GZ3%jVb@]kIn!ikdo:<I[#m<`&P@U1d8q,g?^3LB?2QopU5P+F`&9aQ?HF#"g-<,a%+>$eg'5`rjAjMG9+3PW70lk8"9Id3J.t<cCQ/Z%Gi%3ONE$KU+#WmqIbQ"&b5;i]r!qdEn?oA?G>27R1FZT*Iq\X>rMT,nrD`f%HB,N@Vl+GPjRb;+ItF1%^UEgAo.S_p+'SY=s5cGe%o$dR7q5bY_NH$uEm@tXMlflPHV.[k!T(f[Bj1sc;e8p-.0mnr:Z0MeG(,"D/L<ODq]qq?k1Q/_kR5;G=3gn]BH9u5OoA7o6b]nNb%)CgZs3\k<[5sCcn#qh#Kc[/k\1$<rKHAASo&jOh.j*Qm\F)1*^?2q5Bq1#qG_123&I&%U"*q+Tt6ukiP)OVogAX"?Y,fYmiK_@$R%lA1tF!WRak*F8O81@_.%(qcF>qt?*!lX.-?Mj(b(k_L=o`,LhSGA(#>hu<#t5J@#N\,ZAYfoGfVorm9Qq`d57r^AA.qIma>2QAk"%cjgYXgJ0t!>49,3oTS?"BD0t4WVac_cuhqR[XRh(YG$^endh&cg?:^f<]ohfr?QTTo@^X3p[^)-k8h(@oonAt*@ch6m*oQ(h1<qU%47nT*O/*"BN0XaW6OnjX1hotOS$CeYVI)P:h9e_`([:?4J_]Hr&5a?Y^FeAsFW:Vr9TJ;<i?+,5$erZi_-,.5AsTUr"M'-U[B6'_%Z=kS<9D8r+5Be3@Oe:q:TATY1rs2?sh#eT)UAkJGs+MJj<eQ>.'bh6afBk5.ZGVj;$D,gaQ2^b[)Z)Vc^iHgXLJ`2,>H>ZA%k[Z;%s)#5%rkDlt_02ZP10'6W@1a0!<!195Y9iVXC?^b[L44ADNfOauA3<98W'V[igd`T"bF/5tJ>",W&@okG>16DI7I_$V)Y%7K0T;=8%AZ4u@#&mVBPd-t2..sS]7'$o-27Kjg`YjhY94aXl0M6lPU(+'0P)PE%-X"d_)MTY_.?Lm[YmV`aDqE(/pk<Mt*q.PB85Qh$+EAIY%De&V5d+@4f@S"@M%N1XQRua'H6rb-lI<*aPFDd34UtTLF9khJP^'BdJ"c9?p]bohc#U!l^!]fuZ5`A5;C5j&k3i`_7P`MbuDhhNU%q3QXK@H?<u9O:<0+?]Wb8E#+4j9ViQL$_qOZ8WXcJ<j_b$0tn3^q"huQE?LLSR33(&c-mu,"mXIq7).>Ynjb9;fO2m22(K'Ou5u&%!0XHhXG,P__\OSQ3PJ<;M,=U*"dt0oLVXuD;U$tS/Bhn^?5&D],%G)qQAK&6[\?.hQDk!AaB?P+T7N)5.c5f?XEY*h83.F0qCY$/%<<kp-?^`T1q_omFj@bUq92U^RiPLg(kh^CgCER%F_UU1h>kS@`;qkBLfQ+Ato"/h3/7]BFgjsc.Y2@h?5+eKDYgY@DSaGK8ml2pI%c_3>c9jqqENW'=mai+jW>?g\0O>hZE5/ELSl.dVW:$PSr1)-`[==o&("+cbLnTS@DTuP]R6c/KV+-`ae)^CO,&2#BD^?+>20<k<0%CYXdQ#8u7884W;jE7S!qMB]oHU3)/;@b*!)*n^pcW:eDt`?PPA"=Vek.bDb8p7l>YdVIE+Fj-E?\Yq,`@^OTODCuCmAE4/'S^P_H%?aRL9fLp<hg7l1sL<tYW[f!>`L7Adq-hS-P(<OVi3mqF<of*Yb60,"ma-^ucU<FKeX`A:WAp;:(r!5iEmFZ5"Yr_qPn(u7RhXUCE%I8]Qj\B;(PSame)-Nn`q%db-;e9Yor&c,IHD'pThP#YbFM%L^WAm>EDTskK06:(^3ItpYJ8j+&RiVd1\_7s>6k]OGK81)fVD><kl%Ag2:AX,/jfYOd%qVoX-2&\(1*<K>dTo,UO`@j7fqi/[Jt:iH.;'SYp(Q^*1-<JIQdfJ%Fej5n:\7<9nt02e^&0FuA/Otn5\ZQNr]%E`Aisg;h2[$@"knprEi<1Hsr4@VJG229VFt8tfrFBTXr!NMn%4+]R&_c1s\HZ@6ADY>FUYQru!&\\o>'Onl2!Z!g/ONqPUqmslHc%hhWhq*\P(Te6(f+Ccj)j;sYZ-?EsoWJHC'QO)#@LM4FuJ-Q5?\V&"i9F/*2/qGsDjI`chLhZ;CZZ&,iN6)'KD-$j%2]d\!L>ADsp%h5PFj9::TY,%&<p@/Peg>+qY'hL*o&;*B$P\h%;>ot1C$=r\d39)E@p:QTQA3J^a6>bDe^E8`;T=rOT3B<o>K]?mqDE_7[PTEGX!%8lpO80\ekJ1cJ?bd90/O8#c^\cm6S&Dq$RP$?$OP#^,ZaO=J)ClQ;H+/-)fFV$+[MNE/B2i,."D#QD;n:WV^'($RID^=Wh`BunDH%\b6<2[_B3BKWr39om1'FU(W,?2KgQ:0TERsg]]Z5hB6CadYa4"nTFI<a2[=Mka^D:QSCAS>1irBaWVU_[pnC2c09AC-Kbl!2PMoN%9\g:h=/+@*>7\!/jt&P^Ps]SVD<YE+PE2dD>*EuKeIh"7"/PL0LZ!:*`kcF@Nb9ccVlT%?\`THLf:W>PQO+bMparIfI1%F&<0.k>%-Z!nUW','s\(XDXJCG1^&N3Od:ssE*!JeKM;[Vb/k<d+LZU<mZ.ZsG96_YZ[Jr&8pM$nkO.VDHdquShtg@/DQ*[WWmBNmMFK[K>7%h;GY/i2Rpam/W?KAcko=AD(%k9:?Qf(@3]k$cTl'-+_XS,0@n8mD?,8Tl!;j5WC/T"_,92_h%^5$0tFVPln<on7KCPjENj2.LUY6%PB,5m)^OH\4o6oV(?E7BaHYnm`eFpYW)Y520G9_dk7Lr&&YQ#4kp0LFDLn,\]"[7X#fJ\&]k*A/6!6djRZ4gfWqWm]0$ZhcRjc:$%NU,$QJgi.Lc6.;*6(PDSk,*fIlQSu(qR?M;+o9f=3R9):'7S-^oG^420f5i?Lloi=!JcPKB?/C)"R"PT.K^Zj=-8V3:'/@b__490%W=YnB/(K4&>D.X1m:F4rkr;AbE"c`'"(\u'JmgZm6f*rPU@(5G#Fkt].DZL`^^J&TlrZ]V(jt8Y![R\4J=^;"!Do\)*U0I^`*&+>%BZgE/!J*W@(sj8*:ksLW`f!XnJ8-=q@Y8QKO@2:bgOa8'chh<:6@,O,%q<LJ8qS/$RDh+1SpW?H%%r+nHW#Q]F/Gu?,Ag</&.9:r%jRqH6L'%[s^:B"6]$MoMHci+87\M@ni*3]6O],*D"V;V9';-!DrU;d@J4%KpS89_);Ue;B;U$QpD*;&K>6Cff8]sd-s6njI[W&3U%96i]eWa$mUeK]8i_tsY!+!GSdJW^H%*C/ofc7$;Q(W9QcD[S"o5:<sedrm:8*ej!Oa<8)4\>p&1^8R6NJG/Fo`K3GRL58/(+SBmG%B\l/@::C*(34<4mN<mN>LD"er3'[IHF=fe%`]CD(HFi1YdtK97Uh;br,/mA1k+[:Q]T^'"[aCMR-r;O10@MeK`YgUqNXj_<^[><H%5!a@,Uj?deq(R?6&HSG1)<29F7`H"NEBi)`nm-6E(VjIZS=:)P2JbHD*9!+0IWk=oFaQ@q7U\TX$]Db*Ku#-O]ZO?:6UG<.[P(I2%ncPPok+jUp5'Wg[qr.>Ue>c8&@=\RnlV&ZN'(S2BA=82_hbo.`/*nQ[3j.AB>Uq41#Pri>.RqY=jp#M.lNG;M3WtG/M9&lc"NW\Z%iE12/)N@H68#m$V.RhEu1_M"m&[L>+gn<B/.gC!A;rk0>>'0ko63$k"j3B%9o.<u+?^L^+b95NaNR=b\)sF,&rJ;iSGYkGert1;?%3qk?qZS4j!_''8^PS.7m$Qq@,[0u@uJC^it6QMBsl]c^`L)?s??DLsu[#4g?Xa(&-/($S'6&oU`,A*KJLIYKm+a-Ph)WJ`oZNEfV%U,1b)R<93Lf.QX/"GbV:6k9k*0]bC*TNn2+.=aFSAj,m!b9PTfFi:T,#Go%"+qJ`RFqC'f-r:sZa./'hMu]h('r)c]Hi_mA53Q`6%X)65QKou"jXEeG?8+1_==P-1o\f!5!f1RgYqK7TsNI`)_#s%!fcb<6/'Cs9?:e<`#/n>t,fkNMUiu)lhpsRS(nqi5ji0[qO7IhCj%`k]ED&4RRDb;?#Qli=/nf@pdTS^C'3$64kjU8Lal`rHQbj\)!AIb;,12IQ6c5rtI:Pr[^eS6kr(Epba5"YETsP6MC`0=,dh:^`De%IV]'H6ZRqk?qb>#Q<GQOj/J%!(3dPNZIdh@;,roOg?:#\;@FRrn1b*6#f]+KrPmbf8>M(l7@"Rq"/uN`;(eeJNFS!39mXZDLjj"O%9n3m,H1X`I0P`.e7DFsR5UN(;fD-DF%elu(&`[n885:Ok/M'gYN_+6,Sp-mGiGu)-7eS!?:SZ+9Dr8Q((*]Xf()I%[;u<>uLDb;?%fn2b#LAG2??\g](FHm:hT4%P.gsm1YPb(hlWRNOo.mb&m%d6Sam$BJa;>.!AK@WB:&i?@iGD\MTTMMXI4m<pE_Ad?&WJ"J&F.6-3%?k`2@iDu`mmUbYt5*L"'i0:i>9"@t#m>Gr"qqAOkDUGi]7Cctblq+`,0I_3uP]Eammo3F`F?/:e8'c$&;-j2u_M.2-lCX;FOVKi.%Pe0O^d]HGJSn*[7P,Yi+kmBkVhR>7r"3crug>.9N]F11X>;S.cWOK[*3Hj\i;huss6J(Kaq/4!DhZZ^UL';dp?s7Lch4GA79$i%A%$r`6m8/Ljq6C-d:o#Vjsji,DP@nbB!8W+$C.)D6Y#L$e$aG`$S&0KZ(A6;q3b$a.?chf=P=-d:&q=h2K*&=Q($&^ZY7gW&_Z'f9a%7)p;AUEtOKZ^jQ)io[dd!AiF@YW#e0Cc5hH=W*ZEo$&EARf\<3Z>%DT)1.2m95A,]%5nHW_04Rqo*JSTE6[QcM[e#YCD^m/)1_$d%=_$*>:qHhro#PBYA]A8AB!VLd`^\0a]CgS95o+Q'be`V6<'gA3;55R*%Y:#-(PHr[!8SFN<<*lh`-d]ob.'=8ku<RZN,;@O*FrQ?%%W_pAS)NF>`**K<,;R&SKFL1q7kRuc+<Q*]jL%K+CBSg9WW`EuqMa#T5Qn_A([DS,G&_/7509fs'(TVSjt^D:eBE8QWBc!@e5B>8%,WrW:6R=/p4qMl+m40(Zg4<dCl*"<=5!beLfa@W5`MGiK5=oQ<hqY\`>S..C@lqF6aO\'ub9H7KGA6<WP*S0tBdp1VB)Yc$AV>2q%)'(%Vd5fX_VRU1'5KA`d2o*An%T-J']?CXc_@R`IMn$]aU=iSR#jnN909Im?Y4<2C"AJQ1H0M/!?K1Z^gq<sV]D%5rA=.c-eggu7%b0(eZH0LF49*DngQ8V$[^g#XV-.4'!Pc)14U`%IHno=t/?92WfZ7LL)YuPU;Y8a+a#u*)J/<dD#)^mEqqI'fR7-9IecR7q?iG$:@%d8n[W4sG*+(97U)eaC/2)NgF1Z61!4&pPR'Xr1WJ9_653$H2d1i]nJe`unMgj<gO^74!R,08=/q9c/><QP,jGWVDeN!5N^IU'Htb%i"2[&09F/rYk_*_h\ZONAI*%ubaP9T<RXnV02lGec'k=Al@@3#6.d'Z?[-XPSKT,b2I5[`IDKQa;5Vm)Uf#@X."[T8f6nae-g4Lh%n`/Vn6JVEn(Z+:NL;+mZJ]Rfk"B1Kd[N%OhB;mmK.M>1pkt'r6%sR)E")G,/R'jnbPe%1*'cP%@1DITSjkFmuB+Qr#p'@&hhB<IA%=[UPJA(W,0pbp8i#DcQa0eeM*k239j%5Gn@"]A$[:Jc+1EoO2g/Bfiuq]Z5Nda^1JB<$oo\3^!=X<<XDkQBo:lOJ?W<H+^Li^!2D%['1\*5Vhk5/3(7RRr9:5dGS<O,Oes_ADmk<ae2.p0&72B<0HoBp;Ya^jrI/FJVMo+Be&+9jW\FBC9:jd=GTf+Eu(n*!GoB2jTbD1%l\oL!;dgW(VB9<HU7)X>G!J$U#ZQ]a.tgUX)Ed"CUQO))QF;=?5e351.75a3:NI-TLuG`Z5cL8bYlkJ&:*Rotf]X88ib2\mBT+1p%XSDd`/`;0'78mf:A8se!(@[[ZCbdWDRr='Q.9p_28];i@%m\[b,oE]=Yi*#\jK:4(Y;>T?E8d(f"gAUMXd;VFnW-_N#2'GfMN^Dq%BsQS-pA*(_l1b^4h.M!s6#%K@jGdHhK7t^@PIb$_c;2O0>Z\$TV"2[m!h/92<<N>9+#TNO$n.:6!O&UQ0;FqR!(:G@\)uYl[j\7D%lU\?V=\MfclcP.mJU#l9i-.N]@Vo&^)XtU_e_]g?$!DdpK8C^fL5)0Ia\o$O.LSb!4IV/KG1,=RBXJ=L]nOR#$^tj4B-tFs[!#m.%]-Dd#^?k;%nqm&(209dL@(P-FHjC-ejC`/$%BF\CdRX.c6qb6,N?JOJ]0MFZ6Z^\s#m-H:hu[2.V*]\F[KnU.Oeu/nRRoRl*Hsik%/6^oG%M!VpP\dbM9!MPN\n7i+U=rKoRItl>p?5HtX5,/X<(s/YKm"nDZAl%F1%H=Re%VKcGSjhHob$_"=OeIcVKo`8I?PbHcaT5,%7Zfd0!&9aT3i8?WDCg-E#L"paO?'2""&sJ]KsqZ:k(Ssj5u3u:3F'_D1$.<91$+KWVPK?!flj\EG1+1gNfAF2?-&Bf4];e];0J>N%1PNG3aj^rE:#YA:4#Yt1d_n%f+`b,*U4=+P/Qe1T//%+)RVU&sjdNdJanZ(=O@/^*q(UD7+D(T8S)Q#sYj$)Y$FR=.6AM8$Bo#q1%Mhmd>MODmMGYbMikN<MSZDTGPZcaCrijm&:*La.1*RPQ-B\$#eNICo((G!+)XslVaOqCt>7Fe,XYZam[fN%fLVnBGNn>]\^!aJ[i%H[2J(ihM8o(uKn1A',s99F6gWN-=b+'FjX#-`'L.36SBPRUZ]jE_Q('4]BG.m\\!mB*qIQ(Ogsq.C"AVC9Sku1UT-e*)kV$q5(fC%n+hM3Ftt23I2HqK%)f>o;(NoL[40%P,7t6GY\=;(%!(n`!`>?#"C?"$8Qgl<<<eBhS7X&>eiAh)@^SS-q*hMXBOU8,k^CNc=2`fX%CdD"OU:GhEe\=OG\-G:Emm'g$$7d]a('7Z28G*g*Y>W>RJP8>l7-F@qK8UX:!K&[lQU0R2#P$.iC#!rHY/:"sF+SmF/.QAp"DK&F%HNRQ_@fphcTuX8DT1[Kd!Ae]q6#9a'%LHE\MDZ,S9Vt6Ik0ZX"QLKd7R>Wa1L6:lDi!uusOa/GNn!(rK*D2blmRmdV)p1Vl#3^`%%FM*sf@$^jiQp>eQ#*5Rj*3VG@Skm]\;C^G;VMo9(D%JJpKpW#Tot>FW@(RQ)Y]9^9S*>Gnfh5!@C*9^W1>OdrUiaVlN$^uVXcKIt%eHq$N`h&;qK6Cu.N]L)hKs?U0XU1rn#[X7aeqpgR6cp?EoP-S=8/G65%%c2VMWTX^]bAB6'r-7*\pHI6$/g;,#"OVB(qMD!HOh/9%"$"fY84$X[1]%S"!dTWR0aE0'l1P/]YJu0]3\)E,=A%c<1i+%X$We`%D<iU=:M\^Re@W'iX`Rd8.lEhmOQ?X(#_YJ.2T:'!E!MK^%LCSdKr=4@W!$eI%N2n]H(Fj.!)q&MKdU=jH(7WUj`roM$.D]>fW2FbZM"un>*',lGW6T`C\7M"KBKC;=?M>>/:QR%7BV0l_:-]=>%$]kU`MaO-Db&m`>8C\.\-@&Rck69tcgfn3VD=L$d_rMU1eoSbKR9h'^Q#3q5IEtY(1^C>?Qp^g5S_&:E`]dkD9Y,Mug6.hm1ko%<%$h3\&&;Q5*n2PefbmZ.qF9>BA0<pPc>.4+k.r14W`7j^SmZVpESK0Ku7A4?D2^f,1>:).m&sBTaKM,F`W"]"*88\Sa=oe/&$a%&J%+bt5+J]CnR1l9e6XS79JaWS5ZW/7uo?t>Y7qjNm^QlKM:YMO``aqQ-N,Z/ZD\+Zn>QYJB.Bp/($H5`.n>Xq[1iVd[OXKkrr^<^hV%Kjco*VH?)7TP-gr?<d__NXM!RmQoGJ)^C&W,i'Hr\>C]O^>N=Pp+ZSQLr+OQ9LCK!c'#N=4*a"UT1DMt@:QF`/O"E?_mum:7IObm%+W<1oWhntgNFW(-VPkKo"XGGPdW%jPQo`DEE9Xui)-o0<et<=</HW%/kV=r.cN.-<FX7l[lQ!3uRnll.X#iCB2*.+D""8"sOKQ0F%Ag)rIon>49Y<Y[XMFm@kg/JkF$^l35TJ.LKJ<`-RG3Eh]lD[6ReYW,rQJA-](V3qA5(,feLemr'HnpPC=$[t3nZ]ni5U.'i.sTZD%dBp5KLuoT-BGJY1-#Z5PSp.1I3*,>a_Q-gOm"3S(dSduVMC%_(+Y?aVC=-!nB#0dNC(HP!AApH,E"Fp2T29q!K&7-94A2H@RMGZq%@6Sfe,j\R,9e2?O[;N!_a:(8DmV>""\Ya,n.Bq@-=H]kQC)RW''(O9CUmF.8[7*qJc/P6?A\4=_J\Zk\T]jY<f@pdH^2d.'ir]@T%<%'8<fW&+#*Vmau^^qoSS<7+g)7Y_KiW^rnAqq4l_Y=X?`M0M`NCR:33ZgO+i$B5\V+<mG'8.-j.SeZ;f>!L/q#l+$2kBDgC^b,G%D*I'4/9fXC*[!Z_?e]m[5#G=$1E`8h2af9DDS[JAg/esQ)8;7S#Xd3n5u!t95qDT*_%oIS"+0T7VS:)i.FIN$^hR?[hTlDj=B6q9%g?X](pITDfK?!9',6eudfQb?]>HuHSL*`l\QU%j".pJD]i8b0%9DJ8@&j+#o3CJ[U1Pq'7hVu%!M.'1\/1r[>qAPi*hp*T-8/]CN%KKWfI=`=!b2Ndf-bl6eF)[)?ti5qbJj3Ar].[k_H>f',OQcSbU*Ff07[RXCW378_.9-W^3K8b^_/ATrW"t?#YG5$?gM.&%M3Le(p%UBc]M@)c$3(7/uJEJY\[Qb`Aro/@^5Hd`Mg)EOLclig'N:*q^fmd.q<^/3kcJ:))Mps=ahVaWXlhE2:9^()++d/7W-]'6_naPP,K%Tk0rMMeTQaHRX:L0msg3/D>V(PAP'(\q;:$.JIJC2Ne[\oi]M:7jU^TB9E,;[jt^Uc*e@Fj"^EoD$78D3!fr09eM4jGZ_21WQmQ_%1CS/U;k6>r3U\=7pUJqS]P95!7E*5JF0eJ+'B$o-Na_5>D%k5C8/'IiA2YnIO@IIkCX0d;>5IRq;4g;RpL,[/lE^J";S_p-Um3=^%:bmr6/=1_N?GXmeGhHMCgU?A"ra-#7"&#>1a=#B4+F\j,6L0^^Zq-f2c:=7)5'AE+3:G-nOK"e0:<4S<a.ZEeFV`*RWTfYGc=12l%UJ\%t\`b>Kf4KHIQT"0VdTq8c+!@3M*TB.n/XS<B)p^YiVM0SQq#]lUU#sJq[dR<9rEMnDa27@+<i`qq0N$;1rCgJ!'&As=?V>J`%CC\#>'kd,sdDMCJf][KnOM)ZpWt6<J8D$?*N`WG`F!sl/+ZK!EkK>+!8TsCjW6H<faC6QFBI#,mbbXaV2b)'Ao"(+MRU+"^B=t"K%!*f9NI5B.rBOuG;<K36`Q8QFhW<l]!"Xh#I[ZM&k>t_V!PItGY97$nsH$.[+nXMa+H!b6.oD720Gm>n,]@a.o"*Y+l$*-`Q`$2tu%f@ErC7"T#.Da)&NqIU=\)`K21A_k$DY%#BF"_-'%)T6nCf-=ge;'cTc%4('.X=;7Wh#heShZ<7E4Il@4o\D)6Jl#_\o9N;]H^Fm@%dtnNB.iJL1I)2"BM3Va*k%L$1VRt-V2$H"/1Pc,qmpgg"Clb$=:ab/q`j_.Rm#.,gjQjB,5!TmT,/f!]Bbs&pk).a>Y'U<5.U4qi%*b&Ri'HG-L4jlhUgbM/jBk\An`VZFG;T.Q&GWlm])RcVh(Cd!HfZaCSo@deS[[+*)oa$!:d1k-!<[>X-Mko9F+(fg;lU0)Ij1("-%emmEg<oW$PT.*A$a:\$*4H<=unk5j@CE/&35hY\*MN(ZcE#fpTQ5XJ,8iiQl@;=IH&M0>c`_d^XEKhKL3/S7(i[@?ajSLME8Fc-d%8_F]/;D@-(jFir(>M)=W8+U%rjq,a%$IW%Es5\_F5`?>&+9aD,_)K#(?_-Wo?D,q&6H;?Kn#FKc*O%fON>Tqga>3e4%.C;`apoSV%_Jb?V0T^m_TC-2F-ib7l0p!T0Ar4_S$$MjWdiM&rg4nWk7[)CSP2b@LPd3Z8V0GKG3q;14=NYKDk7_B_Iu(5gYd5[3lEmr"/cV&$%p(dZ(!YVpFd/<?XR_X7@mR]_X,G.#c-'5cBb[m()p74(#=*%@V1-;P63KZmo\2Z5r_*=`mN``_FA]DWO54aU.i&(*8I8QuR7@9H[%?]2W5^QW<XMeuOk)tEOa.fdPI2hY?-n#dOE$X!o*[L&"V;=OEL<\aO>!g,VHBTnO>#m3F1^"I"`S80WJZOa*kYWp5C8f1HTH')M:%RPTACR$YD[:Ub9"_.JuAribqH9A1?OeRJ)lAdsY0X2\XPU>S=IXhi%=I<J&_MnZV70S[+?PjUUuk52`njS8r30c?0V/bL+q+!mEA%3rnr<Rf:#'VSG9()E^n=]BeVpD^K;g=QZ7HD2M>fcM3rEn.$uYhBCA+Oe\rJ1A)WDYBgnL#*4/bRP.,%.@[<Q,8mhV=ul3,LH]O]%WURtTA:ElEiG7%<YGRp:<A[n_:GmA7*:r;oM2#fgauZN<40UR:gO>YgOI_d$gL*')+=93G*?IenP8.*P#^t[YQ$A8#:;,#sb_-9N%nb?q\U;Ys#5+`rjK0,sM]:9%AhE,_3j,agqcpYAQWgUu1r#LW>jR>Xq@E&I(gG)^V2T]2-9r.\\,2nH\9GKBSUHQGNKZ.[2;9L's%k"r$rn:C07'U>B9*]1s9&>p@iJ<56#7G/iujT2Zogk_!F)175nc*X0QfpnLl^S[:gB7tZRBaQ/Yf(.U@RHab0/KjpYaG(+<!^:p8%Qd"?<TRc6Z(0'rqgcT^44kP#I4C7(p;`hnL9@/I.S0+,)2#$J^K>n8JWr(G:aK_&9lL3!e\\b#f4^3YNSEXkpEV22'(G/^*`rrZ,%-.o7W52*eNYR2BH@fjg]"0r?!oBU1*mBB[\-:D<$eT$ur8DiPM`[fOiXKE'(_p-05J)W(m$JO,)Gb%XW-^$0CXnshXO:S"os7-A>%#@H53KK`7UW,]1236:aA/>MIG.J=tf1Mj?!(0Y_!_Co`E1.2tP5u0@M#FMWnG:Q^^PlijI=b-7R5rtIbMN@KmVq6?cSGTO7O'Jsl%;?g`r'nDaL-<YQ.,ca9Z=kf<EQ4[[%pm+cnRl6+g^^IYBGL>]k'!2Y3BPhV@G"jp)COIg=gO*[LPo4iCCm1t&cq`8)CE(FS2qa('%3Gl(0faj%/jD96V?;0$%8.$tQ0k4Kl'<M`qd<aQ/o*M]Bo4F=@>dQEe39@E%ecp>-hF)/Fp0a/D<X_+Y&12!mTe[A+\9H>HlhZ!\%INu,mhu=Yo6.s$Q_uJZ@ao:\b^A[JDs65m-s8$+&oZR7qJ,RjNn,N=/^\ms-b9-`Qa1qQCQXBd%r8mnOJ,8iaJ,/,sIXV7fs8:na%JOl&/r-,pQqu?F%DuU@J*YB(~>%AI9_PrivateDataEnd